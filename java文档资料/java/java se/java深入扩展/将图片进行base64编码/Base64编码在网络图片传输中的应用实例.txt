Base64编码在网络图片传输中的应用实例。

分类： 系统运维

   开始之前，我们先八一八base64编码，Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9 ，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。
  其实，简单一点来说，它就是用一个字符代表6个bit来传输。
  最近在做项目的时候，需要将前台传来的基于base64编码的图片数据重新转换成图片，其中就要用到java中对base64编码封装的一个类，这里真的要赞一下java,确实在网络编程方面，java提供的支持很给力。
下面就将我用于base64编码的代码贴出来。
//下面增加的方法是对前台传的的基于base64编码的字符串进行处理，将其转换成对应的图片
    //或者将图片转换成对应的基于base64的字符串
    public static String GetImageStr(String imgFile) {//将图片文件转化为字节数组字符串，并对其进行Base64编码处理 
        InputStream in = null;
        byte[] data = null;
        //读取图片字节数组 
        try {
            in = new FileInputStream(imgFile);
            data = new byte[in.available()];
            in.read(data);
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        //对字节数组Base64编码 
        BASE64Encoder encoder = new BASE64Encoder();
        return encoder.encode(data);//返回Base64编码过的字节数组字符串 
    }

    public static boolean GenerateImage(String imgStr, String savedImagePath) {//对字节数组字符串进行Base64解码并生成图片 
        if (imgStr == null) //图像数据为空 
            return false;
        BASE64Decoder decoder = new BASE64Decoder();
        try {
            //Base64解码 
            byte[] b = decoder.decodeBuffer(imgStr);
            for (int i = 0; i < b.length; ++i) {
                if (b[i] < 0) {//调整异常数据 
                    b[i] += 256;
                }
            }
            //生成jpeg图片 
            //  String imgFilePath = "c:/3.jpg";//新生成的图片 
            OutputStream out = new FileOutputStream(savedImagePath);
            out.write(b);
            out.flush();
            out.close();
            return true;
        } catch (Exception e) {
            return false;
        }
    }