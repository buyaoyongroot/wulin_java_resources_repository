import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPReply;

public class FtpClientUtil {
	private static String serviceurl = PropertiesUtil.getValue(Constant.GLOBAL_CONFIGURATION, "downloadserver");
	private static String servicePort = PropertiesUtil.getValue(Constant.GLOBAL_CONFIGURATION, "downloadserverport");
	private static String servicedir = PropertiesUtil.getValue(Constant.GLOBAL_CONFIGURATION, "downloadserverdir");
	
	public static String uplodaZll(File file){
		if(file == null)return "";
		String fileName = "zll.apk";
		StringBuffer url = new StringBuffer();
		FTPClient ftpClient = new FTPClient();
		url.append(serviceurl).append("/").append(servicePort).append("/").append(servicedir).append("/").append(fileName);
		try {
			int reply; 
			FileInputStream fis = new FileInputStream(file);
			ftpClient.connect(serviceurl,21);//连接FTP服务器
			ftpClient.login("zll", "123456");//服务器用户名密码登陆
			reply = ftpClient.getReplyCode(); //获取ftp连接的回应代码
			if(!FTPReply.isPositiveCompletion(reply)){//判断回应代码是一个正数着完成响应（是正数返回true，否则返回false）
				ftpClient.disconnect();//关闭ftp连接
				return url.toString();
			}

			createDirecroty(servicedir+"/zll.apk", ftpClient);
			ftpClient.setFileType(FTP.BINARY_FILE_TYPE); //设置文件以二进制的流上传
			ftpClient.storeFile(fileName, fis);//储存文件
			
			fis.close();
			ftpClient.logout();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return url.toString();
	}
	/*
	  //随机获取文件名
	  public static String randomString(int length){
		if (length < 1) {		             
			return null;		         
		}		         
		if (randGen == null) {		                
			randGen = new Random();		                
			numbersAndLetters = ("0123456789abcdefghijklmnopqrstuvwxyz" +
			"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ").toCharArray();	
		}		        
		char [] randBuffer = new char[length];		         
		for (int i=0; i<randBuffer.length; i++) {		            
			randBuffer[i] = numbersAndLetters[randGen.nextInt(71)];		          
			}		        
		return new String(randBuffer);		
	}*/
	public static void createDirecroty(String remote,FTPClient ftpClient) throws IOException{   
        String directory = remote.substring(0,remote.lastIndexOf("/")+1);   
        if(!directory.equalsIgnoreCase("/")&&!ftpClient.changeWorkingDirectory(new String(directory.getBytes("utf-8"),"utf-8"))){   
            //如果远程目录不存在，则递归创建远程服务器目录   
            int start=0;   
            int end = 0;   
            if(directory.startsWith("/")){   
                start = 1;   
            }else{   
                start = 0;   
            }   
            end = directory.indexOf("/",start);   
            while(true){   
                String subDirectory = new String(remote.substring(start,end).getBytes("utf-8"),"utf-8");   
                if(!ftpClient.changeWorkingDirectory(subDirectory)){   
                    if(ftpClient.makeDirectory(subDirectory)){   
                        System.out.println(ftpClient.changeWorkingDirectory(subDirectory));;   
                    }else {   
                        System.out.println("创建目录失败");   
                    }   
                }   
                   
                start = end + 1;   
                end = directory.indexOf("/",start);   
                   
                //检查所有目录是否创建完毕   
                if(end <= start){   
                    break;   
                }   
            }   
        }   
    }   
}
