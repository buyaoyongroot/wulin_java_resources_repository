<=====================================================================================================================================================================>
常用js代码

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
在js中如何获得当前工程的上下文: 

	function getContextPath() { 
		var contextPath = document.location.pathname;
		var index =contextPath.substr(1).indexOf("/"); 
		contextPath = contextPath.substr(0,index+1); 
		delete index; 
		return contextPath; 
	} 

	console.log(getContextPath());

	var requestContext = getContextPath();

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
如何将符合json格式的字符串转换为对象

	var object = eval('(' + result.response + ')');
	alert(object.flag);

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
将JSON对象转化为JSON字符	
	
	var last=JSON.stringify(msg03.rows[0].fArchivalID); //将JSON对象转化为JSON字符

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js中几个常用的输出调试语句:

	alert(contextValue);  这个是最常用的

	console.info(contextValue) ; 这个也比较常用,他是将内容信息输出到浏览器的firebug的控制台,

	console.log(contextValue); 这个也比较常用,他是将内容信息输出到浏览器的firebug的控制台,只是改信息是红色的,点击可以跳转到web的tab页,展示contextValue更为详细的信      
                                   息.
	debugger; 这是一个类似于java的调试方式,只要在javascript代码中嵌入这个语句即可.
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
在js中如何删除json对象中的某个元素或对象.

	var filters = {
		groupOp : 'AND',
		rules : [ 
			  {field : 'baseInfo.xm',op : 'cn',data :username },
			  {field : 'baseInfo.zfbh',op : 'cn',data :number},
			  {field : 'zfztCode',op : 'eq',data :prisonState}
		]
	};
	delete filters.rules[2]; //删除 {field : 'zfztCode',op : 'eq',data :prisonState} 这个对象

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js关于js对象与数组的增删改
 
    1. 对象 : 对象最好参考w3school文档上的api的对象介绍
	    var obj = {} ;
		添加 : 
			方法一 :
			       obj['id'] = 'xxxxx';
			方法二 :
					obj.id = 'xxxxx';
		修改 : //修改指的对值的修改
		     obj['id'] = 'yyyyy';  或 obj.id = 'yyyyy';
		删除 : 删除指的是将该属性删除
		      delete obj['id'];  或 delete obj.id;
	2.数组: //数组最好参考w3school文档上的api
		var arr = [];
		添加 : 
		     arr.puth('11新');
		修改 :
		     arr[0] = 'hshsh是';
		删除 : 
			 arr.splice(0);
			

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
JS中对象与字符串的互相转换

	1：jQuery插件支持的转换方式 
		代码如下: 
		$.parseJSON( jsonstr ); //jQuery.parseJSON(jsonstr),可以将json字符串转换成json对象

		反过来，使用 serialize 系列方法：如：var fields = $("select, :radio").serializeArray();


	2：浏览器支持的转换方式(Firefox，chrome，opera，safari，ie9，ie8)等浏览器 
		代码如下: 
		JSON.parse(jsonstr); //可以将json字符串转换成json对象 
		JSON.stringify(jsonobj); //可以将json对象转换成json对符串

		注：ie8(兼容模式),ie7和ie6没有JSON对象，需要引入 json.js 或 json2.js。

		 

	3：Javascript支持的转换方式 
		eval('(' + jsonstr + ')'); //可以将json字符串转换成json对象,注意需要在json字符外包裹一对小括号 
		注：ie8(兼容模式),ie7和ie6也可以使用eval()将字符串转为JSON对象，但不推荐这些方式，这种方式不安全eval会执行json串中的表达式。

		 

	4：JSON官方的转换方式 
		http://www.json.org/，提供了一个json.js,这样ie8(兼容模式),ie7和ie6就可以支持JSON对象以及其stringify()和parse()方法；

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
关于在接送中如何将将一个数组及数组中的对象转换为json字符串的解析案例:

	function setData(signArr){  //为什么要将要将这个数组中的对象一一读出来,然后在封装成对象及数组,因为这种原生的对象在解析为json字符串是解析不出来,所有才经过如下的转换
		var datas = new Array();
		for(var i=0;i<signArr.length;i++){
			var obj = {}; //定义一个对象
			obj.height = signArr[i].Height; //这是为这个对象添加属性并为这个属性赋值,该属性一旦添加就不能再该对象还存在的情况下清除(至少目前以我的了解),但可以对该属性的值进行修改
			obj.width = signArr[i].Width;
			obj.imgTag = signArr[i].ImgTag;
			obj.signPass = signArr[i].SignPass;
			obj.imgValue = signArr[i].ImgValue;
			datas[i] = obj;
		}
		return datas;	
	}
	
	var datas = setData(signArr);
	datas[0].height= 2; //这里已经将 这个数组中的第一个对象的height属性的值改为了2.

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
jQuery - 基于serializeArray的serializeObject

	jQuery.prototype.serializeObject=function(){  
		var hasOwnProperty=Object.prototype.hasOwnProperty;  
		return this.serializeArray().reduce(function(data,pair){  
			if(!hasOwnProperty.call(data,pair.name)){  
				data[pair.name]=pair.value;  
			}  
			return data;  
		},{});  
	};   

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js中关于读取当前跳转过来的url的?后面的字符串值(即请求参数);

	function getUrlParam(name){

		var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)"); 

		var r = window.location.search.substr(1).match(reg); 

		if (r!=null) return unescape(r[2]); return null;
	} 
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
用form表单提交请求与jquery的ajax提交请求参数的异同

	1. 使用form表单提交请求时,我们一般是将参数放在form表单的元素中,这种提交方式有关好处就是它不会自动转换我们元素的中参数的值,即使我们的参数中有 百分号(单引号需要自己转换) 等特殊字符,
	
	2. 如果是ajax或者值超链接提交请求,如果我们所传的参数中有 百分号 等特殊的字符,它会为我们自动转换掉,如果我们非要穿这些特殊字符,我们只有自己转换.
	
	3.几个之前写的特殊字符转换方法
	
		/**
		 * 单引号的URI编码
		 */
		function singleEncodeURI(url){
			url = url.replace(/'/g,"%singleQuoteMark");
			return url;
		}
		
		/**
		 * 双引号的URI编码
		 */
		function doubleEncodeURI(url){
			url = url.replace(/\"/g,"%doubleQuoteMark");
			return url;
		}
		
		/**
		 * 单引号的URI解码
		 */
		function singleDecodeURI(url){
			url = url.replace(/%singleQuoteMark/g,"'");
			return url;
		}
		
		/**
		 * 双引号的URI解码
		 */
		function doubleDecodeURI(url){
			url = url.replace(/%doubleQuoteMark/g,"\"");
			return url;
		}
		
		/**
		 * 编码百分号
		 * @param url
		 */
		function percentEncodeURI(url){
			url = url.replace(/%/g,"percentMark");
			return url;
		}
		
		/**
		 * 解码百分号
		 */
		function percentDecodeURI(url){
			url = url.replace(/percentMark/g,"%");
			return url;
		}
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js中如何将long型的日期转换为正常的日期

	Date.prototype.format = function(format) {
		var o = {
			"M+" : this.getMonth() + 1, // month
			"d+" : this.getDate(), // day
			"h+" : this.getHours(), // hour
			"m+" : this.getMinutes(), // minute
			"s+" : this.getSeconds(), // second
			"q+" : Math.floor((this.getMonth() + 3) / 3), // quarter
			"S" : this.getMilliseconds()
		// millisecond
		}
		if (/(y+)/.test(format)) {
			format = format.replace(RegExp.$1, (this.getFullYear() + "")
					.substr(4 - RegExp.$1.length));
		}
		for ( var k in o) {
			if (new RegExp("(" + k + ")").test(format)) {
				format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k]
						: ("00" + o[k]).substr(("" + o[k]).length));
			}
		}
		return format;
	};
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	举例:
	var cellvalue = "-446284800000";
	var date ;
	if(cellvalue == null || cellvalue == ''){
		return "";
	}
	date =  new Date(parseInt(cellvalue)).format("yyyy-MM-dd");
	alert(date);

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js如何对日期进行加减的案例:

	var today=new Date(); // 获取今天时间
	today.setDate(today.getDate() + 7); // 系统会自动转换
	
	下面是date类提供的三个你可能生成字符串用到的函数：
	getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31).
	getMonth() 从 Date 对象返回月份 (0 ~ 11).
	getFullYear() 从 Date 对象以四位数字返回年份.

	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
得到两个日期的比较(相差多少天)

	var tqqr = new Date("2015-11-30");
	var tqzr = new Date("2015-12-30");

	var day = (tqzr-tqqr)/86400000; //86400000是一天的毫秒数
	return day;
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js如何将符合时间格式的字符串转换为日期

	var date = new Date("2015-12-30")

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js中如何将日期格式化为yyyy-MM-dd格式

	var today=new Date(); // 获取今天时间
	today.setDate(today.getDate() -1); // 系统会自动转换
	var month = String((today.getMonth()+1));
	var date = String(today.getDate());
	if(month.length ==1){
		month = "0"+month;
	}
	if(date.length == 1){
		date = "0"+date;
	}
	today=today.getFullYear()+"-"+month+"-"+date;
	
...............................................................................................................
js中如何将 当前日期 格式化为yyyy-MM-dd HH:mm:ss 格式
	/**
	 * 得到当前日期
	 */
	var getCurrentDate = function(){
			var today=new Date(); // 获取今天时间
			today.setDate(today.getDate()); // 系统会自动转换
			var month = String((today.getMonth()+1));
			var date = String(today.getDate());
			var hours = String(today.getHours());
			var minutes = String(today.getMinutes());
			var seconds = String(today.getSeconds());
			
			if(month.length ==1){
				month = "0"+month;
			}
			if(date.length == 1){
				date = "0"+date;
			}
			if(hours.length == 1){
				hours = "0"+hours;
			}
			if(minutes.length == 1){
				minutes = "0"+minutes;
			}
			if(seconds.length == 1){
				seconds = "0"+seconds;
			}
			today=today.getFullYear()+"-"+month+"-"+date+" "+hours+":"+minutes+":"+seconds;
			alert(today);
		return today;
	}

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js中如何将 当前日期 格式化为yyyy-MM-dd HH:mm:ss 格式 , 优雅的处理方式

	Date date = new Date().format("yyyy-MM-dd")
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
在js中对一个数组的操作时,当我们用push的方式向一个数组中添加一个元素后返回是这个数组的长度.

	var filters = {
				groupOp : 'AND',
				rules : [ ],
				groups:[]
			};
			
	var len = filters.groups.push({
				 groupOp:'or',
				 rules:[]
			 });
			 
	alert(len); //这是groups数组的长度
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
如何采用js获取 驼峰字符串的最后一个驼峰字符串(例如:aaBbCc:得到的是Cc)

	思路:获取字符串的长度,倒序循环字符串直到得到大写字符,并将之前循环的字符一起拼接返回

	/**
	 * 字符串为驼峰标识(得到最后一个驼峰的字符串:例如:aaBbCc:得到的是Cc)
	 */
	var getLastHump = function(humpCharacters){
		var lastHumpCharacter = "";
		if(humpCharacters != undefined && humpCharacters != null && humpCharacters.length != 0){
			for(i=humpCharacters.length-1;i=>0;i--){
				var character = humpCharacters.charAt(i);
				if(character<'A' || character>'Z'){
					lastHumpCharacter = character+lastHumpCharacter;
					
				}else{
					lastHumpCharacter = character+lastHumpCharacter;
					return lastHumpCharacter;
				}
			}
		}
		return "";
	}

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
关于做一个自动打开和关闭的提示框(dialog)的思路:

	要使用setTimeout('alert(1111)',1000); 这个函数

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
关于使用了iframe,此时关于window.parent....的用法的案例

	请见: '...\一些资料\javascript\关于window.parent....的用法的案例'
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
关于在iframe的父亲页面中调用iframe所引用的页面的js方法:

	window.frames["FileScan3125cName"].Open();
	
	详细用法案例请见: '...\一些资料\javascript\关于window.parent....的用法的案例'

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
关于iframe跨越问题的解释:

	由于iframe是跨域的,所有客户端的访问IP应与iframe的src的ip地址相同
	
		例如:<xhtml:iframe name="FileScan3125cName" src="http://localhost:8080/test/oldTT.html" width="0" height="0"></xhtml:iframe>
		
		客户端的访问地址: http://localhost:8080/x5
		
		这样就可以

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
关于父窗口与子iframe窗口之间函数的条用的总结;

	注意: 不能再同一个js事件函数中既加载iframe子页面.有调用iframe子页面中的方法.要调用iframe中的js方法.必须父窗口中用另一个事件去调用.
	
			同时iframe的src所访问的页面可以是通过Java类再次跳转的jsp页面

	一.父窗口调用子窗口的中的方法:
	
		1.格式: window.frames['iframe的那么名称'].iframe子窗口中的就是方法();
		
			例如: window.frames["FileScan3125cName"].ScanClose();  

		2.格式: document.frames['iframe的那么名称'].iframe子窗口中的就是方法();
		
			例如: document.frames["FileScan3125cName"].ScanClose();  // 注意这个在IE中测试通过,但在google浏览器中不行
			
		3.格式: iframe的那么名称.window.iframe子窗口中的就是方法();
		
			例如: FileScan3125cName.window.ScanClose();
			
	二.子窗口调用父窗口中的方法:
	
		1.格式:window.parent.方法();
			例如:window.parent.uploadAndCloseWindow();   //这方法google流浏览器中也是可以的,只是如果端口号不同的话,有跨越问题.

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
如何让一个div产生滚动条例子:

	style="overflow:scroll";

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
table元素的表格的边框的的产生只能用border="2px",不能再css去设置	

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
jquery 的序列化表单,用于ajax提交表单的参数获得

	$("#form1").serialize()

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
javascript中的instanceof ,in ,typeof ,undefined这四个用法:

	var answers = new Array();
	if (answers instanceof Array) {
            for (var i = 0; i < answers.length; i++) {
                map[answers[i]] = answers[i];
                answerStrings.push(answers[i]);
            }
        } else {
            for (var k in answers) {
                map[answers[k]] = k;
                answerStrings.push(answers[k]);
            }
        }

	var i=10;

	alert(typeof i);
	
	..................................
	
	if(typeof (VideoInputCtl) != "undefined"){
		alert(typeof (VideoInputCtl));
	}
	
	..................................
	//temp 为一个属性
	if(temp == undefined){
		var temp ; //声明一个属性temp
	}
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
原生的javascript事件的html元素另一种触发方式,不是在html元素里写的:

	document.getElementById("Mdown").onmousedown=function(e) { alert("ss");}

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
记住:不要把html元素的属性与css样式的属性混淆,这是两个不同的概念,因此html的table元素的属性border="px"与用在css里找到该table元素对象,然后定义border="1px"是不一样的.这才
可以解释有些html元素属性与用css的选择器找到该元素,然后定义相同的属性,然而在界面上呈现出来的样式不一样的原因.

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
javascript中的数字传参问题:

	例如:<input class="drugstoreAndUserDetailedCommon" onclick="drugstoreAndUserDetailed1221('+obj1.id+',\''+obj1.Cp_integral_id+'\')" type="button" value="查看详
	细" />

	这是一个典型的数字长度溢出问题:obj1.Cp_integral_id = 12345678901234567 ,这个参数的长度有17位,超过了javascript中的数字初度,因此我们在获取该参数是,得到的值就变了
	
	解决方案:将这个参数变为字符串即可: \''+obj1.Cp_integral_id+'\' ;

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
关于DOMContentLoaded事件使用说明:

	window.addEventListener("DOMContentLoaded", function() { }     //事件绑定函数window.addEventListener
	DOMContentLoaded是firefox下特有的Event, 当所有DOM解析完以后会触发这个事件。
   	与DOM中的onLoad事件与其相近。但onload要等到所有页面元素加载完成才会触发, 包括页面上的图片等等

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
在网页中做视频或连接摄像头的关键标签:

	<canvas />
	<video />

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
document.writeln("<html>")的使用

	<script language=javascript>
		document.writeln("<html>")
	</script>

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
javascritp中关于for in 的用法:

	var nameAndDate = value.split(' ');
	for(var i in nameAndDate){
		if($.trim(nameAndDate[i]) != ""){ //这里用jquery的去空函数
			alert(nameAndDate[i]);
		}
	}

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
html中的img元素如何直接使用 (将图片编译成base64码)base64码转换成图片
	
	html:
	
	<input id="GrabBase64" type="button" value="GrabBase64" onclick="grabbase64()" style="width: 120px" />
    <textarea id="Base64Text" readonly="readonly" style="height: 120px; width: 480px;"></textarea>
	<img id="Base64Image" src="data:image" style="height: 120px; width: 160px;"/>
	
	...................................................................
	javascript
	
	function grabbase64() {
	var szBase64 = VideoInputCtl.GrabToBase64(".jpg");//拍照并传回其Base64编码字串.参数:影像格式，必须是.bmp、.jpg、.png或.tif。返回:Base64编码字串。该函数C#,
	
	这里只是个例子,在一般的javascript中不可以用的.
	
	Base64Text.value = szBase64;
	Base64Image.src = "data:image/tiff;base64," + szBase64;
}

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
DOMContentLoaded事件

  过去,当一个页面完成加载时,初始化脚本的方法是使用load事件,但这个类函数的缺点是仅在所有资源都完全加载后才被触发,这有时会导致比较严重的延迟,开发人员随后创建了一种自定
  
  义事件,domready,它在DOM加载之后及资源加载之前被触发.domready事件迅速被众多JavaScript库所采用,它开始在本地浏览器中以DOMContentLoaded的形式被使用;此外,它目前已在HTML5
  
  中被标准化,下面的代码显示了DOMContentLoaded是如何在document对象中被触发的; document.addeventListener('DOMContentLoaded',function(){...},false);值得注意的是,这个网站
 
 的行为层可以被更快速地启动,这意味着用户可以更快开始浏览网站,这对于连接速度慢的网络或者包含大量图片并需要一些时间加载图片的网页来说特别重要,如果只想在所有资源都完成加
 
 载之后运行脚本, 那么仍然可以使用load.

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
DOMContentLoaded及window.addEventListener("事件名称",触发函数function(){})的用法:

	window.addEventListener("DOMContentLoaded", function() { 
		document.getElementById("snap").addEventListener("click", function() {
			注意:addEventListener是嵌套使用的
		}
		document.getElementById("myDivId").addEventListener("click", function() {
		
		}
	}

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
用js来得到父亲页面:

 	var ZJ_fid = window.parent.getTimeString();

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
javascript中为某一个表单元素赋值及提交表单还可以这样来使用:

		<script type="text/javascript">
		function doSignature() {
			document.FQuery.Act.value = "1";
			document.FQuery.submit();
		}
		</script>

		<form name="FQuery" action="index.jsp" method="post">
		<table width="100%" align="center" border="0">
			<tr>
				<td height="28"><input type="hidden" name="Act" value="">
				</td>
			</tr>
			<tr>
				<td height="22" align="center">
					<input type="button" value="自动批量签章" onClick="doSignature();">
				</td>
			</tr>
		</table>
		</form>

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
document.frames与window.frames在不同浏览器中的使用

	问题：

		document.frames 只有 IE Opera 支持。等同于 window.frames。用来取得当前页面内 window 对象的集合。

		在 Firefox Chorome Safari 中使用 document.frames 不能获取到 FRAME 元素

	解决方案：

		用 window.frames['myframe'] 代替 document.frames('myframe')或document.frames['myframe']。

		注意：window.frames只可写成window.frames['myframe']不能写成window.frames('myframe')

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js 中 如何判断该浏览器是否为 ie 浏览器;

	var ie = !-[1,];
	
	解析: true表示为IE,false表示为非IE
	
	原理：[1,]在标准浏览器中返回"1"，相当于调用[1,].toString()，在IE中返回"1,"
	在这个时候对返回值使用负号强制转换为数字时，标准浏览器返回1，IE则返回NaN，
	再对1和NaN取反时，标准浏览器返回false，IE返回true。
	
	原文基本上没有什么问题，但他的判断方式还不是很严谨。
	如：navigator.userAgent.indexOf("Safari")>0，如果"Safari"这个单词出现在userAgent的最前端，那不是就无法得到正确的结果了。应该把 >0 改为 !=-1
	
	
	方法二:
	
		<script language="JavaScript" type="text/javascript">
			if ((navigator.userAgent.indexOf('MSIE') >= 0) 
				&& (navigator.userAgent.indexOf('Opera') < 0)){
				alert('你是使用IE')
			}else if (navigator.userAgent.indexOf('Firefox') >= 0){
				alert('你是使用Firefox')
			}else if (navigator.userAgent.indexOf('Opera') >= 0){
				alert('你是使用Opera')
			}else{
				alert('你是使用其他的浏览器浏览网页！')
			}
		</script>
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
在js中如何将一段HTML代码加载可用:

	var str = '';
	str += '<div id="DivID" style="border:1px solid red;height:700px ">';
	str += '<OBJECT id="WebPDF" width="100%" height="100%" classid="clsid:39E08D82-C8AC-4934-BE07-F6E816FD47A1" codebase="iWebPDF.cab#version=8,2,0,948" VIEWASTEXT>';
	str += '</object>';
	str += '</div>';
	document.write(str); //这行代码很重要

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------






























































































<=====================================================================================================================================================================>
常用js代码

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------























<=====================================================================================================================================================================>
如何修改一个文件和一个文件内容的字符编码:
	文件字符编码:修改用来打开该文件的工具的字符编码 2.是用记事本打开该文件,然后在另存为窗口中修改该文件的字符编码.
	文件内容字符编码:在该文件的页面写一条该文件提供的字符编码语句即可 例如:(html/jsp)
	
<=====================================================================================================================================================================>
js中如何对字符串进行编码及对url进行编码(针对页面到页面的跳转,参数带有中的情况)

	url参数两次编码:
	
		 var conditionJson = JSON.stringify(settings.result); //可以将json对象转换成json对符串
		 conditionJson = window.encodeURI(conditionJson);  //对带有中文的参数进行编码
		 conditionJson = window.encodeURI(conditionJson);  //对带有中文的参数进行编码
		 window.location.href = contextPath+"/criminalSearch/fieldIndex?conditionJson="+conditionJson;
		 
	url参数两次解码:
	
		var conditionJson = getUrlParam("conditionJson");
		conditionJson = window.decodeURI(conditionJson);
		conditionJson = window.decodeURI(conditionJson);
		
		
	.................................................................................................................
	//读取当前跳转过来的url的?后面的字符串值(即请求参数);
	function getUrlParam(name){

		var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)"); 

		var r = window.location.search.substr(1).match(reg); 

		if (r!=null) return unescape(r[2]); return null;
	} 

<=====================================================================================================================================================================>
js中如何对字符串进行编码及对url进行编码

	js对url文字进行编码涉及3个函数：escape,encodeURI,encodeURIComponent，相应3个解码函数：unescape,decodeURI,decodeURIComponent

	1、   传递参数时需要使用encodeURIComponent，这样组合的url才不会被#等特殊字符截断。                           

	例如：<script language="javascript">document.write('<a href="http://passport.baidu.com/?logout&aid=7&u= +encodeURIComponent("http://cang.baidu.com/bruce42")+">退出</a>');</script>

	2、   进行url跳转时可以整体使用encodeURI

	例如：Location.href=encodeURI("http://cang.baidu.com/do/s?word=百度&ct=21");

	3、   js使用数据时可以使用escape

	例如：搜藏中history纪录。

	4、   escape对0-255以外的unicode值进行编码时输出%u****格式，其它情况下escape，encodeURI，encodeURIComponent编码结果相同。
	最多使用的应为encodeURIComponent，它是将中文、韩文等特殊字符转换成utf-8格式的url编码，所以如果给后台传递参数需要使用encodeURIComponent时需要后台解码对utf-8支持（form中的编码方式和当前页面编码方式相同）

	escape不编码字符有69个：*，+，-，.，/，@，_，0-9，a-z，A-Z

	encodeURI不编码字符有82个：!，#，$，&，'，(，)，*，+，,，-，.，/，:，;，=，?，@，_，~，0-9，a-z，A-Z

	encodeURIComponent不编码字符有71个：!， '，(，)，*，-，.，_，~，0-9，a-z，A-Z
	
	...................................................................................................................................................................
	使用案例:
	
		var dataParameter = "judge=login&inputPath="+para.path+"&outputPath="+para.path2+"&positionMode=coordinate"+
		"&coordinateX=400&coordinateY=600&isItPage=2";
		dataParameter = window.encodeURI(dataParameter);  //对带有中文的参数进行编码,然后后台再是用java来处理,
		alert(dataParameter);
		$.ajax({
			   type: "GET",
			   url:"http://localhost:8888/signature2/SignatureServlet",
			   //data:"judge=login&path="+para.path+"&path2="+para.path2,
			   data:dataParameter,
			   dataType: "json",
			   async:true,  //async为true表示为异步请求,为false为同步请求
			// data: $("#form1").serialize(), 如果提交的表单,可以是用此项来序列化表单的数据
			   success: function(msg){
				   uploadSignatureFile(para);
			   },
			   error: function(msg){
				   alert("盖章成功!");
				   uploadSignatureFile(para);
			   }
		});
		
	...................................................................................................................................................................
	对应的后台java处理方式
	
		String outputPath = request.getParameter("outputPath");
		
		byte[] buf = outputPath.getBytes("ISO8859-1");
		outputPath = new String(buf,"UTF-8");
		
	...................................................................................................................................................................
	
		表单采用Post方式提交，解决乱码的方法为：
		request.setCharacterEncoding( myEncoding );

		表单采用Get方式提交，解决乱码的方法为：
			方式一：
				key = new String(key.getBytes("iso8859-1"), "utf-8");
			方式二：
				修改server.xml：	URIEncoding="utf-8"
			方式三（不依赖Tomcat的配置，推荐）：
				浏览器中两次URL编码。
				服务器中自己再做一次URL解码。
				
				var dataParameter = "judge=login&inputPath="+para.path+"&outputPath="+para.path2+"&positionMode=coordinate"+
				"&coordinateX=400&coordinateY=600&isItPage=2";
				第一次编码: dataParameter = window.encodeURI(dataParameter);  //对带有中文的参数进行编码,然后后台再是用java来处理,
				
				第二次编码: dataParameter = window.encodeURI(dataParameter);  //对带有中文的参数进行编码,然后后台再是用java来处理,

				或在jsp中使用struts2的标签:
				
				<s:a action="processDefinitionAction_delete" onclick="return delConfirm()">
					<s:param name="key" value="%{@java.net.URLEncoder@encode(key, 'utf-8')}"></s:param>	
					删除
				</s:a>

				%{@java.net.URLEncoder@encode(key, 'utf-8')}  //这表示调用的是静态的方法,但这样使用要在struts2的配置文件中配置让ognl表达式可以使用
																静态方法     <constant name="struts.ognl.allowStaticMethodAccess" value = "true" />
				
				对应的java后台代码是:
				
				String parameter= URLDecoder.decode(parameter,"UTF-8");
				
				````````````````````````````````````````````
				中 这个字对应不同的编码编码后的字符:
				
				iso8859-1
				utf-8			E4 B8 AD  //这个字是 "中"
				gbk/gb2312		D6 D0      //这个字是 "中"
<=====================================================================================================================================================================>


<=====================================================================================================================================================================>
<=====================================================================================================================================================================>

HTML

<=====================================================================================================================================================================>
HTML是超文本标记语言,
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
如果解决html页面编码问题:
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">;

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
html中常用的标签:

	<ul> 无序列表
	<ol> 有序列表
	<frameset> 窗体布局     //用了frameset就不能用 <body>标签 ,也就是说不能将<frameset>标签嵌套在<body>标签中
	<frame> 辅助窗体布局
	<p> 段落标签
	<div> 定位标签
	<span> 自订标记 ,可以用来分离文本

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
两个重要的标签:
	<div>标签占用整行.而<span>标签根据内容分配大小. 如果是在表格中,则使用<tbody><tfoot><thead>标签辅助.


<=====================================================================================================================================================================>
多个Radio或多个checkBox 的name 值是这样的?
	
	多个Radio或多个checkBox 的name 值是相同的.

<=====================================================================================================================================================================>
如何 改造 <input type = "file" /> 标签

	<div style="height:120px;width:100px;border:solid 1px red;text-align:center;line-height:25px;padding:40px 0px 0px 0px">
         <input name = "parameter" type="file" style="position:absolute;z-index:0;height:120px;width:100px;opacity:0;filter:alpha(opacity=0);cursor:pointer;" />    
         <span style = "color:green;">上传本人近期1寸白底彩照1份</span>
	</div>	

<=====================================================================================================================================================================>	
JS获取自身所在文件的目录路径

     很多时候我们都需要在js文件中获取该文件的详细路径，以便根据其他文件与该js的相对位置计算并设置其他一些文件如图片或样式或脚本的目录路径。我们一般都这样做：

     假设外部js文件的文件名为：test.js，则在test.js中都这样写：

		var js=document.scripts;
		var jsPath;
		for(var i=0;i<js.length;i++){
		 if(js[i].src.indexOf("test.js")>-1){
		   jsPath=js[i].src.substring(0,js[i].src.lastIndexOf("/")+1);
		 }
		}
		alert(jsPath);

			 或者为了提高效率，这样写

		var js=document.scripts;
		var jsPath;
		for(var i=js.length;i>0;i--){
		 if(js[i-1].src.indexOf("test.js")>-1){
		   jsPath=js[i-1].src.substring(0,js[i-1].src.lastIndexOf("/")+1);
		 }
		}
		alert(jsPath);



		这种思路很清晰，根据文件名获取引用的文件的src属性并进行判断截取即可。

		但这种办法有以下两个缺点：
		1、需要遍历页面的js文件，有时可能效率会比较低。
		2、如果页面中出现目录不同的重名的js文件则可能判断错误。

		其实我们可以有更简单的办法来准确获取路径，这是在一次js测试突然发现并幡然醒悟的。

		var js=document.scripts;
		js=js[js.length-1].src.substring(0,js[js.length-1].src.lastIndexOf("/")+1);
		alert(js);



		直接使用js.length？这会正确吗？
		其实仔细想想，由于判断路径的js代码一般都直接放在js文件中而不是函数中，所以当加载该js文件时会立即执行其中的语句，而执行此语句时所获取到的js文件数目正好是js.length-1，因为页面后面的js文件还没有加载，所以该处的js文件获取的数目并不是页面所有的js文件的数目。这样一来，获取路径就无需再遍历了，而且文件判断也无需文件名，判断更加准确(js.length-1永远都是其文件本身)。

<=====================================================================================================================================================================>
获取电脑分辨率的案例:

 <script type="text/javascript" >
		 function getInfo(){ 
     var s = "";   
      s += " 网页可见区域宽："+ document.body.clientWidth+"\n";    
      s += " 网页可见区域高："+ document.body.clientHeight+"\n";    
      s += " 网页可见区域宽："+ document.body.offsetWidth + " (包括边线和滚动条的宽)"+"\n";    
      s += " 网页可见区域高："+ document.body.offsetHeight + " (包括边线的宽)"+"\n";    
      s += " 网页正文全文宽："+ document.body.scrollWidth+"\n";    
      s += " 网页正文全文高："+ document.body.scrollHeight+"\n";    
      s += " 网页被卷去的高(ff)："+ document.body.scrollTop+"\n";    
      s += " 网页被卷去的高(ie)："+ document.documentElement.scrollTop+"\n";    
      s += " 网页被卷去的左："+ document.body.scrollLeft+"\n";    
      s += " 网页正文部分上："+ window.screenTop+"\n";    
      s += " 网页正文部分左："+ window.screenLeft+"\n";    
      s += " 屏幕分辨率的高："+ window.screen.height+"\n";    
      s += " 屏幕分辨率的宽："+ window.screen.width+"\n";    
      s += " 屏幕可用工作区高度："+ window.screen.availHeight+"\n";    
      s += " 屏幕可用工作区宽度："+ window.screen.availWidth+"\n";    
      s += " 你的屏幕设置是 "+ window.screen.colorDepth +" 位彩色"+"\n";    
      s += " 你的屏幕设置 "+ window.screen.deviceXDPI +" 像素/英寸"+"\n";    
      alert (s);
    }
    getInfo();
  </script>
<=====================================================================================================================================================================>
获取电脑分辨率的案例二(这种方式要用到jquery):

	<script type="text/javascript">
	var height=$(window).height();
	var width=$(window).width();

	alert(height);
	alert(width);

	</script>

<=====================================================================================================================================================================>
对于 class="validate[required,maxSize[20]]" 这样的样式如何jQuery的选择器进行查找且获取后面的参数

	1. html代码
	
		<form>
			<input type="text" name="bh" id="bh" class="validate[required,maxSize[20]]"/>
		</form>

	2.用jQuery的选择器进行查找且获取后面的参数
	
	/**
	 * 设置表单背景颜色
	 */
	var setFormBackground = function(){
		$("form").find('[class*=validate]').not(":disabled").each(function(){ //这里的class*很重要
			var field = $(this);
			
			if(field.attr('class').indexOf('required') != -1){ //判断validate后面的参数
				//为每个元素设置背景颜色
				field.css({"background-color":"#fff6f6","border-color":"#FF99CC"});
				field.blur(function(){ 
					var element = $(this);
					if($.trim(element.val()) !='' && $.trim(element.val()) != null){
						element.css({"background-color":"#FFFFFF","border-color":"deepskyblue"});
					}else{
						element.css({"background-color":"#fff6f6","border-color":"#FF99CC"});
					}
				});
			}
		});
	}

	$(document).ready(function(){
		//设置表单背景颜色
		setFormBackground();
	});
	
<=====================================================================================================================================================================>
jQuery使用prop设置checkbox全选、反选

	$(function(){
		var checkbox = $("input[type='checkbox']");
		//全选
		$('#select-all').click(function(){
		
			//只是为checkbox打上了勾,却没有添加check属性,所以要配合checkbox.attr("checked", true); 来说使用
			checkbox.prop("checked", true);
			
			//checkbox加上check属性
			checkbox.attr("checked", true);
			
		});
		//反选
		$('#select-reverse').click(function(){
			checkbox.prop("checked", function(index, attr){
				return !attr;
			});
		});
	});

<=====================================================================================================================================================================>

























<=====================================================================================================================================================================>
<=====================================================================================================================================================================>
css
<=====================================================================================================================================================================>
如何采用css进行水平居中与左右居中
	text-align:center;vertical-align: middle
-------------------------------------------------------------------------------------

如何在一个jsp/html的head标签中使用css

     使用元素选择器
	<style type="text/css">
		p{
		color:red
		}

-------------------------------------------------------------------------------------
	
选择器的重要性:

	选择器非常重要.具体使用方法请参考相关文档

-------------------------------------------------------------------------------------

如何jsp\html中引用定义在另外一个文件中的css
	
	<link rel="stylesheet" type="text/css" href="文件名.css"/>

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------

<link ... />标签与<style>标签不能嵌套使用,

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

背景图片的设置一般在<body>标签中
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

边框

	1.盒子模型:就是一个元素在浏览器页面中所占的大小
	2.padding : 内边距
	3.margin : 外边距

-------------------------------------------------------------------------
盒子模型:
					_________________________________________________________________________
					|      margin(外边距)                           			|	
					|	_________________________________________________________	|				  
					|     	|				  			|	|
					|	|	边框			  			|	|
					|	|	_________________________________________	|	|		  
					|	|  	|			  		|	|	|
					|	|	|	padding(内边距)		  	|	|	|
					|	|	|	_________________________	|	|	|
					|	|	|	|			|	|	|	|
					|	|	|	|	标签的内容	|	|	|	|
					|	|	|	|_______________________|	|	|	|
					|	|	|					|	|	|
					|	|	|					|	|	|
					|	|	|_______________________________________|	|	|
					|	|							|	|
					|	|							|	|
					|	|_______________________________________________________|	|
					|									|												|									|
					|									|
					|_______________________________________________________________________|
							(div标签所占的大小)


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
对 文本(Text)的理解:
	在一个标签(例如:div标签)内的东西都称之为文本,不管这些标签是字体还是标签.

<=====================================================================================================================================================================>
如何通过js控制css里的样式:
	首先得到对应标签的对象,然后通过该对象得到 style 属性,然后在 javascript 中得到style的相关属性,其实这些属性与css里的相关属性是一一对应的.

	例如:document.getElementById("b1").style.position="absolute";


<=====================================================================================================================================================================>
如何使用div+css创建模态窗口:
	具体创建方式请见:C:\Users\lenovo\Desktop\常用类范例\常用类\html_csss_javascript_jquery\css\用div与css创建的多窗口

<=====================================================================================================================================================================>
x5用到的css案例:

	.changed{
				font-size:20px;
				/*background-color:blue !important;*/
				color:black!important;
				font-family:"楷体";
				box-sizing:content-box !important;
		 };

<=====================================================================================================================================================================>

















<=====================================================================================================================================================================>
<=====================================================================================================================================================================>

javascript
<=====================================================================================================================================================================>
正直表达式.

	在javascript中由于没有比较字符串的equals() ,而是使用 "==" 方法,因此只能用match()方法来替代,而match(正直表达式)中的正直表达式对一些字符我们需要进行转义,例
	如:"+".match("/+");"-".match("/-");"*".match("/*");"/".match("//");"=".match("/=");等等.. 
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
JS判断输入值是否为正整数(使用正直表达式)
	function test() { 
　　　　var num = document.getElementById(“num”).value; 
　　　　if (num==”") { 
　　　　　　alert(‘请输入内容’); 
　　　　　　return false; 
　　　　} 
　　　　if (!(/(^[0-9]*[1-9][0-9]*$)/.test(num))) { 
　　　　　　alert(‘输入的不是正整数’); 
　　　　　　return false; 
　　　　}else { 
　　　　　　alert(‘输入的是正整数’); 
　　　　} 
　　}

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
javascript中的全局变量:

	javascript中的全局变量是直接定义在函数的外面,不管是在jsp/html的<script>脚本中还是单独定义js文件中都是一样的.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
"==="与"=="的理解:
	"===" : 表示等同符,而"=="表示等值符.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
javascript中的==与===和java中==与equals的关系:

	javascript中的==与java中equals()方法同义,而===与java中==同义.  但是当我们比较一个对象是否为null或""是还是用==. 

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
javascript在jsp/HTML中位置

	javascript在jsp/html放在什么地方都可以,javascript在jsp/html中的执行顺序是从上到下的执行顺序,但一般放在<head>标签中

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
方式一:
   <head>
	<script type="text/javascript">
	alert();

	</script>
   </head>

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

方式二: 在<head>标签中应用js外部文件

	<head>
		<script type="text/javascript" src="...文件名.js"></script>
	</head>

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

javascript的调试:

	打开ie浏览器,执行相关jsp/html,然后按f12进行调试.当然也可以用alert()或document.write();进行调试.在用ie浏览器调试javascript时应先设置ie浏览器,设置的方法是:
	点击Internet选项/高级/禁用脚本...

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

javascript中常用的一些事件:

	onclick="要调用javascript方法"; 例如:onclick="test()"

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
javascript中方法形式:

	function 方法名(){

        }
	
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
全局变量与局部变量:

	全局变量:在方法外面定义的变量或在方法内部定义变量且该变量没有var
	局部变量:声明在方法里的变量叫做局部变量,但是一个局部变量一旦在方法中声明,在该方法中的任何地方都有效.
	
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
javascript中遍历for循环的使用:

		var a=new Array();
		a[0]=12;
		a[1]=13;
		for(var i in a){	
			alert(a[i]);

                 }
	

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

数据类型:变量没有类型,但数据是有类型的,例如:  

	var i=10;

	//数据类型有:number(NaN属于number),object,null,undefined,string 等.

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

如何测试一个变量的类型:

	var i=10;

	alert(typeof i);

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

强制转换:

	1.强制转换的格式: 转换后的类型(转换前的类型);  例如 : Boolean("ab"); Number("123");
  	2.将字符串类型转换为数值型的方法: 
		2.1 parseInt("123");parseFloat(123); 这两方法主要是针对字符串
		2.2 Number("123");这个方法可以针对任意的类型

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

如何判断一个变量时什么类型:

	var autoLogin = Ext.util.Cookies.get("autoLogin");
	var remember = Ext.util.Cookies.get("remember");
	alert(remember+","+autoLogin);
	alert(typeof(remember)+","+typeof(autoLogin)); //重点

 
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

将其他类型转换为String型:

	var s=123;
	var str=s.toString();这个方法不可以处理null与undifinde
	var str=String(s);这个方法能对null进行处理

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
应用类型中属性的使用:
	var object=new Object();
	
	object.id="123";
	object.name="张三";
	
	alert(object.id+"=="object.name);

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
对象的字面量表示法:

    表示一:
	var arr={name:"haha",id:12};
    表示二:
	var array=[{name:"ccc",id:21},{name:"ddd",id:25}]
    取值方式一:
	alert(arr.name);
    取值方式二:
	alert(array[1].id);
    取值方式三:
	alert(array[1]["id"]);
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
多重数组与对象的相互嵌套:

	定义一个数组,数组里面装的是一个对象,对象里有一个属性又是一个数组,这个数组里又装一个对象:
	var city=[{id:001,name:"北京",children:[{id:001001,name:西城区},{id:001002,name:东城区}]},{id:002,name:"四川",children:[{id:002001,name:成都},{id:002002,name:泸州}]}];
	
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
function(函数):

	在javascript中由于所有的类型都是var,所以在函数的形参列表中不用写类型参数的类型

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
如何定义函数举例:

	function test(a,b){  //形参
		alert(argument[i]);  // arguments.length实际参数的个数
		alert(test.length);  //形式参数的个数 .即(函数名.length)
	}

	<input ... onclick="test(1,2,3,4,5,6)"/> //实际参数
		//说明: (函数名.length与arguments.length 一般在都在他们所在的函数中调用,其他位置没有什么意义)

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
嵌套函数:

	function test1(){
		var obj=new Object();
		obj.stuty=function{
				alert("haode");
			}

	}

------------------------------------------------------

	方式二;
	
	function test1(){
		
		var stuty=function{
				alert("haode");
			}

	}

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
函数的特殊调用方式:

	var t=function(){
		window.alert("xx");
	}	

	function test(){
		f();
	}	
	
	t1(t);

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
常用对象:

	Date , Boolean ,Number ,String ,window ,Math ,Event

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
为什么使用Javascript?

	1.验证用户输入的数据(客户端的验证)
	2.增加页面的动感效果

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
验证举例:

	请见:常用类范例\常用类\html_csss_javascript_jquery\javascript\表单校验\validate1 (或) validate2

<---------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
函数的声明方式:
	1.函数在编译阶段就进行预编译加载的方式:
		test();  //即可以在函数的前面进行调用,也可也在函数的后面进行调用
		function test(){
			alert("预编译");
		}
		
	2.函数在执行阶段才进行编译与加载的方式:
		var test1()=function{
			alert("执行阶段")
		}
		test1();  //函数在执行阶段才进行编译与加载,这种方式只能在函数声明的后面才能调用,不能再函数声明的前面进行调用
		
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
同名函数问题:
	两个同名函数可以存在,并且与参数个数无关,但是后面的同名函数会将前面的同名函数覆盖掉,也就是说,我在调用该函数时,其实调用的总是第一个.
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
事件:      注:如果没有进行特殊的说明.表示该事件可以在广义的标签中使用.
	onclick : 单击
	ondblclick : 双击
	onfocus :得到焦点  //一般是在文本框之类的标签中使用
	onblur :失去焦点   //与onfocus使用的标签一样
	onchange :失去焦点  //主要是在select标签中使用
	onload : 加载事件  //该标签一般放在body标签中,且是在整个jsp/html加载完成后才触发.
	onunload : 卸载事件  //与onload使用方式一样
	onselect : 一般是在文本框之类的标签中使用,且是在该文本框中输入了内容,且该内容被选中时触发.
	onsubmit : 表单提交事件  //用在form标签中.在表单提交是触发.例如:<form ... onsubmit="return fy()">

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
js中的类(一)
	定义类:例如
		function Person(name,age,sex){
			this.name=name;
			this.age=age;
			this.sex=sex;
			//前三个为定义属性
			//下面这两个为定义方法
			this.study=study;
			this.hao=function(){
				alert("hao");
			}
		}
		function study(){
			alert("study");
		}
		
	使用已经定义类的对象;
		function user(){
			var p=new Person();
			p.name="张三";
			p.age=20;
			//上面两个表示使用属性
			//下面这个表示调用方法
			p.study();
		}
		//当然.user函数体中的代码可以放在函数体的外面
		
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
继承;
	function Student(){}
	student.prototype=new Person("哈哈",20,"女");  //对继承下来的属性进行初始化
	//为Student类添加方法与属性
	Student.prototype.id;  //为Student类添加一个属性为id
	Student.prototype.test=function(){   //为Student类添加一个方法为test()
		alert("添加的方法");
	}
	//使用类Student
	var s=new Student();
		s.name="李四";  //对name属性进行重新赋值
		//使用属性name
		alert(s.name);
		//使用方法study()
		s.study();
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
javascript中类的定义(二)

	首先说说类，在一个类里我们会有以下的几个特征： 
	1. 公有方法 
	2. 私有方法 
	3. 属性 
	4. 私有变量 
	5. 析构函数 
	我们直接看一个例子： 
	类例子 
	复制代码 代码如下:

	/***定义类***/ 
	var Class = function(){ 
	var _self = this;//把本身引用负值到一变量上 
	var _Field = "Test Field"; //私有字段 
	var privateMethod = function(){ //私有方法 
	alert(_self.Property); //调用属性 
	} 
	this.Property = "Test Property"; //公有属性 
	this.Method = function(){ //公有方法 
	alert(_Field); //调用私用字段 
	privateMethod(); //调用私用方法 
	} 
	} 

	这里我已把注释都写上，大家大概也会一眼就看得明白。对于少写JS的朋友，可能会觉得奇怪为什么我会定义一个_self的变量, 因为在js里，this不用对于其他的对象语言，他的解析过程与运行过程中this会改变的。这里简单说说js里this的定义，若有需要我可以开多一篇。 
	定义：this是包含它的函数作为方法被调用时所属的对象。 
	特征：this的环境可以随着函数被赋值给不同的对象而改变！ 
	有兴趣的朋友可以网上找找资料了解一下，说回正题，这里的_self目的是为了开多一个私有的变量，直接指向类的本身。 
	刚刚还说到一个析构函数的问题，这可以直接用代码来实现。在函数的最后直接写执行代码就OK。 
	代码 
	复制代码 代码如下:

	/***定义类***/ 
	var Class = function(){ 
	var _self = this;//把本身引用负值到一变量上 
	var _Field = "Test Field"; //私有字段 
	var privateMethod = function(){ //私有方法 
	alert(_self.Property); //调用属性 
	} 
	this.Property = "Test Property"; //公有属性 
	this.Method = function(){ //公有方法 
	alert(_Field); //调用私用字段 
	privateMethod(); //调用私用方法 
	} 
	/***析构函数***/ 
	var init = function(){ 
	privateMethod(); 
	} 
	init(); 
	} 

	使用这个类，引用我同事的那句“简单得很！” 
	var c = new Class(); 
	这样就OK 
	类的定义就说完了	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Javascript 静态类的实现(一)

	早些天写过了类的实现，接着我们看看的静态类的实现。这东西在Javascript里用得会非常的频繁，因为针对现在的网页，多个基于同一个类对象的页面不多，往往不同块对象的交互就可以解决问题了，这就需要在JS针对元素定义几个静态类就可以完事了，进入正题。
	这次我们直接看例子：

	/***定义静态类***/
	var Core = {};
	Core.StaticClass = (function(){
		var Return = {
			Property: "Test Static Property",    //公有属性
			Method: function(){    //公有方法
				alert(_Field);    //调用私用字段
				privateMethod();    //调用私用方法
			}
		};    //定义返回的公有对象
	 
		var _Field = "Test Static Field";    //私有字段
		var privateMethod = function(){    //私有方法
			alert(Return.Property);    //调用属性
		}
	 
		return Return;    //生成公有静态元素
	})();
	　　

	这次，我用的是闭包的方式去实现，其中最重要的一点是reutrn Return; 这里会引伸到值类型与引用类型的概念。在js里，Object就是一个引用类型，在闭包里，我会抛出一个包含有属性与方法的Object的引用，这样，也可以说是把这个Object抛向了外部，实现了公开。StaticClass这个变量接住了Return引用。 对于闭包内部的私有字段与方法都是没有被抛出的，这样就可以形成一个私有的环境。
	很多时候我们都会用这种技巧去对JS进行分块，让程序不会那么的混乱。
	上面的例子没这么干过的兄弟们也可以自己去试试。忘了，刚刚那个例子大家可以这么样去试试。
	Core.StaticClass.Method();
	Core.StaticClass.Property = “Test2″;
	Core.StaticClass.Method();

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Javascript 静态类的实现(二)
	
	function TitanContext(){
		
		this.util =new function(){
			
			/**
			 * 得到屏幕分辨率的宽度
			 * widthPercent : 值在0~1直接
			 */
			this.getWidthPercent = function(widthPercent){
				if(widthPercent == null || widthPercent == ""){
					widthPercent = 1;
				}
				return $(window).width()*widthPercent;
			}
			
			/**
			 * 得到屏幕分辨率的高度
			 * heightPercent : 值在0~1直接
			 */
			this.getHeightPercent = function(heightPercent){
				if(heightPercent == null || heightPercent == ""){
					heightPercent = 1;
				}
				return $(window).height()*heightPercent;
			}
		}
	}

	var TitanContext = new TitanContext();

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
html或xml中常用的一些属性与方法

	innerHTML 设置或获取位于对象起始和结束标签内的 HTML。 
	innerText 设置或获取位于对象起始和结束标签内的文本。 
	outerHTML 设置或获取对象及其内容的 HTML 形式。 
	outerText 设置或获取对象的文本。 
	getElementById() 通过ID来获取对应的元素
	getElementsByName 通过Name来获取对象的元素,返回的是一个数组
	getElementsByTagName()  通过标签名来获取对象的元素,返回的是一个数组
	parentNode 该节点的父节点
	childNodes 该节点的子节点,返回的是一个数组
	firstChild,lastChild 该节点的子节点中的第一个和最后一个,如果该节点没有子节点则返回null
	nextSibling,previoursSibling 该节点的兄弟节点的前一个和后一个.
	nodeType 该节点的类型.9代表Document节点 ,1代表Element节点,3代表Text节点,8代表Comment节点,11代表DocumentFragment节点
	nodeValue : text节点或Comment节点的文本内容
	nodeName 元素的标签名
	
----------------------------------------------------------------
	注:下面的parentNode表示的父亲节点,newNode表示新节点,beforeNode表示newNode的下一个兄弟节点
	
	parentNode.insertBefore(newNode,beforeNode);  //通过父亲节点在某个孩子节点之前插入一个新节点.
	parentNode.replaceChild(newNode,oldNode);  //通过父亲节点将某一个老节点替换掉.
	parentNode.removeChild(childNode);  //通过父亲节点将childNode孩子节点删除
	
	childNodes[0] - <to> 元素的第一个子元素（文本节点） 
	nodeValue - 节点的值（文本本身） 

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
对nodeName与nodeValue的理解:
	如果该标签是 元素节点 :则 nodeName的返回值为 该元素的名字,而nodeValue的返回值为null
	如果该标签是 文本节点 :则 nodeName的返回值为 该元素的#Text,而nodeValue的返回值为 文本内容

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
对获取属性值与设置属性值的理解:
	获取属性值:1: 对象.属性  , 2 : 对象.getAttribute("属性");	

	设置属性值:1: 对象.属性=值 , 2 : 对象.setAttribute("属性",值); 

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------

获取元素的值
	下面的代码检索第一个 <title> 元素的文本值：
	x=document.getElementsByTagName("title")[0].childNodes[0];
	txt=x.nodeValue;结果：txt = "Harry Potter"

---------------------------------------------------------------
获取属性的值
	下面的代码检索第一个 <title> 元素的 "lang" 属性的文本值：
	txt=document .getElementsByTagName("title")[0].getAttribute("lang");结果：txt = "en"
	
---------------------------------------------------------------
改变元素的值
	下面的代码改变第一个 <title> 元素的文本值：
	x=document .getElementsByTagName("title")[0].childNodes[0];
	x.nodeValue="Easy Cooking";
	
---------------------------------------------------------------
改变属性的值
	setAttribute() 方法可用于改变已有属性的值，或创建一个新属性。
	下面的代码向每个 <book> 元素添加了名为 "edition" 的新属性（值是 "first"）：
	x=document .getElementsByTagName("book");
	for(i=0;i<x.length;i++)
	  {
	  x[i].setAttribute("edition","first");
	  }
	  
---------------------------------------------------------------

	注意 : 下面的 xmlDoc 在 js中都用 document 替代 ;

创建元素
	document .createElement("元素") 方法创建新的元素节点。
	document .createTextNode("文本节点") 方法创建新的文本节点。
	document .appendChild(元素) 方法向节点添加子节点（在最后一个子节点之后）。
	如需创建带有文本内容的新元素，需要同时创建元素节点和文本节点。
	下面的代码创建了一个元素 (<edition>)，然后把它添加到第一个 <book> 元素中：
	newel=document .createElement("edition");
	newtext=document .createTextNode("First");
	newel.appendChild(newtext);
	x=document .getElementsByTagName("book");
	x[0].appendChild(newel);
	
		
---------------------------------------------------------------
删除元素
	parentNode.removeChild(元素) 方法删除指定的节点（或元素）。
	下面的代码片段将删除第一个 <book> 元素中的第一个节点：
	x=document .getElementsByTagName("book")[0];
	x.removeChild(x.childNodes[0]);   //x节点为childNodes[0]节点的父节点.

---------------------------------------------------------------
如果操作<div>标签中style的属性
		<html>
			<head>
				<title>操作javascript</title>
				<script type="text/javascript" >
					function controlFont(){
						var obj =document.getElementById("firstSelect");
						var selectedValue=obj.value;
						var secondDiv =document.getElementById("secondDiv");
						secondDiv.style.fontSize=selectedValue;
					}
				</script>
			</head>
			<body>
				<div div="firstDiv">
					<select id="firstSelect" onchange="controlFont()">
						<option value="20px">正常</option>
						<option value="25px">较大</option>
						<option value="30px" >很大</option>
						<option value="35px">非常大</option>
					</select>
				</div>
				<p/>
				<div id="secondDiv" align="center" style="font-size:30px">
					你好
				</div>
			</body>
		</html>
		
---------------------------------------------------------------
如何查找style中属性的属性:请依据如下路径查找:
	w3cSchool/HTML Dom/dom style

---------------------------------------------------------------
关于cookie的存于取,另见w3cSchool中的javascript的cookie讲解:
	简单cookie的取法:
		function getCookie(){
			var cook=document.cookie;
		}
		
---------------------------------------------------------------
二维数组的定义与使用
	var  a=new Array();
	var  b=new Array();
		b[0]="b12";
		b[1]="b11";
	var  c=new Array();
		c[0]="c12";
		c[1]="c11";
	使用
	a[0][0]的值为b12

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
表格的特殊性:

---------------------------------------
	对表格动态的增,删,改,查 的一套API
		
		createCaption() 为表格创建一个 caption 元素。
		createTFoot() 在表格中创建一个空的 tFoot 元素。
		createTHead() 在表格中创建一个空的 tHead 元素。
		deleteCaption() 从表格删除 caption 元素以及其内容。
		deleteRow() 从表格删除一行。
		deleteTFoot() 从表格删除 tFoot 元素及其内容。 
		deleteTHead() 从表格删除 tHead 元素及其内容。 
		insertRow() 在表格中插入一个新行。 
		insertCell(0);在表格 行 中插入一个新列。 
		<tbody>用于分离表单头的,
			
---------------------------------------
为表格增加一行的范例:

		var i=2;
		function addTable(){
			var firstTable=document.getElementById("firstTable");
			var newRow=firstTable.insertRow(2);
			var cell1=newRow.insertCell(0);
			var cell2=newRow.insertCell(1);
			var cell3=newRow.insertCell(3);
			cell1.innerHTML="NEW CELL1";
			cell2.innerHTML="NEW CELL2";
			cell3.innerHTML="NEW CELL3";
			i++;
		}
		
---------------------------------------
表单:
	1.获得表单对象:
		getElementById() 通过ID来获取对应的元素
		getElementsByName 通过Name来获取对象的元素,返回的是一个数组
		getElementsByTagName()  通过标签名来获取对象的元素,返回的是一个数组
		document.formName //formName为表单名字,即(form中的name)
		document.forms[0] :0 表示第一个表单
		document.forms[formName]:formName为表单名字,即(form中的name)
		
---------------------------------------
表单中的method 属性不写时其默认值是什么?
	表单中的method 属性不写时其默认值是get提交方式
	
---------------------------------------
表单中常用的两个方法:
	submit():相当于是点击submit按钮,用于提交表单
	reset():相当于是点击reset按钮,用于重置表单
	
---------------------------------------
表单中常用的两个事件:
	onsubmit: 在表单提交前触发
	onreset: 在表单重置前触发
	
---------------------------------------  //注:这里的表单域指的是BUTTON, FIELDSET, INPUT type=button, INPUT type=checkbox, NPUT type=file, INPUT type=hidden, INPUT type=image, INPUT type=password,
										INPUT type=radio, INPUT type=reset, INPUT type=submit, INPUT type=text 这些标签
引用表单域的方法:
	1.form.name
	2.form.elements[i]
	
---------------------------------------
如何获得表单中最初的默认值:
	defaultValue :获得对应文本的值

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
如何查找Html标签的相关特性:
	主要查找html文档与w3c文档


<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
getElementsByName():方法的总结:
	在html中,不是每一个标签都有name属性,但是我们常常又需要通过getElementsByName()来获得多过标签的对象,我们的解决办法使用INPUT type=checkbox, 标签然后再去找对应的父标签

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
getElementsByTagName():方法的总结:

	下面这个例子会返回所有 <p> 元素的一个节点列表，且这些 <p> 元素必须是 id 为 "maindiv" 的元素的后代：
	document.getElementById('maindiv').getElementsByTagName("p"); 

<=====================================================================================================================================================================>
对定位的总结:
	由于html的标签中name属性只有少数几个标签有,而有时候我们希望将定位做的很灵活,这时我们就有充分使用 getElementById()与getElementsByTagName()的特性 和<div>与<span>
	这两个元素的特性. 当然对于有name属性的标签,这个方法就要充分使用 getElementsByName() . 差点忘了,<tbody>在表格中要充分使用. 还有<input type="hidden">标签

	例如:
---------------------------------------------------------------------------------------
	
function allSelect(){
	var i1=document.getElementById("i1");
	var div1=i1.getElementsByTagName("div");
	alert(div1[0].getElementsByTagName("span")[0].getElementsByTagName("div").length);
}

--------------------------------------------------

		<div id="i1">
			<div class="c2">
				<span>
					<div>
				</div>
				<div>
				</div>
				</span>
				<span>
					jsjs
				</span>
			
			</div>
			<div class="c2">
				<div>
				</div>
				<div>
				</div>
				<div>
				</div>
			</div>
			
		</div>



<=====================================================================================================================================================================>
Bom中的window的使用:
	alert() 显示带有一段消息和一个确认按钮的警告框。 
	close() 关闭浏览器窗口。 
	confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框。 
	open() 打开一个新的浏览器窗口或查找一个已命名的窗口 
	setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式。
	setTimeout() 在指定的毫秒数后调用函数或计算表达式。 
	clearInterval() 取消由 setInterval() 设置的 timeout。
	clearTimeout() 取消由 setTimeout() 方法设置的 timeout。 

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
对setInterval()	与setTimeout()理解:
	window.setTimeout("propocol()",1000);//这条语句他不锁定线程,仅仅起到定时作用,也就是每隔1000秒启动一个线程执行该propocol()函数
	当然:setInterval()也是同理的.

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
关于方法名与属性名的同名问题:
		由于javascript的特殊性,不能将方法名与属性名定义为同名.
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
伪协议:
		<th><a href="javascript:delete1()">删除</a></th>
		
-------------------------------------------------------------
		function delete1(){
			var flag=window.confirm("确定要删除吗?");
			if(flag){
				alert("是的,你已经删除");
			}else{
				alert("亲,你取消了删除 !");
			}
		}

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
不是伪协议的另类做法:

	 <div id="bgDiv" style="display:none;"> 
    </div> 
      

	 <a href="javascript:" onClick="bgDiv.style.display='';loginBox.style.display='';">登录1</a> 
      //这样就可使用hever()了


         <div id="loginBox" style="position:absolute; left:367px; top:150px; z-index:1;display: none;" > 


<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
在<a>的伪协议来模仿onclick事件是,如何传一个对象的参数

	var rowData = jQuery("#showTableList").getRowData(rowId)
    console.log(rowData);
    var link = "<a href='javascript:criminalDetail("+JSON.stringify(rowData)+")'><font color='blue'>"+rowData['BH']+"</font></a>"; 
	
	
	function criminalDetail(rowData){
		alert(rowData);
		console.log(rowData);
	}

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------	Bom中的history与Navigator与eval的理解:
	window.history.go(number|url): number表示要前进或后退的网页个数.正数表示前进,负数表示后退,而url表示前进或后退的网址.
	window.navigator.userAgent:userAgent 属性是一个只读的字符串，声明了浏览器用于 HTTP 请求的用户代理头的值
	eval(string);将一条字符串当做一条语句来执行.string表示要执行的字符串.	

	
<=====================================================================================================================================================================>
在jsp的js中如何在获取request域对象中的参数:

	<script type="text/javascript">
		init("${inputPathParameter}","${ouputPathParameter}","${fileTypeParameter}");
	</script>

<=====================================================================================================================================================================>
























<=====================================================================================================================================================================>
<=====================================================================================================================================================================>

Ext4
<=====================================================================================================================================================================>
xtype 的作用:

	xtype : 'panel', 这句话的意识其实就相当于是在创建一个 panel类的实例,即对象

<=====================================================================================================================================================================>
initComponent 的作用:

	initComponent 其实就相当于是Java的类构造函数
	
	用法:
	
		initComponent : function() {
			this.callParent(arguments);
		}

<=====================================================================================================================================================================>
Ext中Tree的json的范例:

	String userTree = "[{\"id\":\"user1\",\"text\":\"用户1\",\"leaf\":\"false\",\"children\":[{\"id\":\"user2\",\"text\":\"用户2\",\"leaf\":\"true\"}]}]";

<=====================================================================================================================================================================>

Ext中Grid的json的范例:

		{"totalCount":5,"rows":[{"id":1,"leaf":false,"text":"部门管理","qtitle":"departmentView"},{"id":2,"leaf":false,"text":"研究部","qtitle":"departmentView"}]}
		
		注意:totalCount与rows是不是这名称,要看store里我们定义的名称
		
		范例:
		
			Ext.define("cn.department.store.DepartmentStore",{
				extend:"Ext.data.Store",
				model:"cn.department.model.DepartmentModel",
				pageSize:10,//每页显示5条
				//autoSync:true,//与服务器同步
				proxy :{
					type:"ajax",
					url:"",
					reader:{
						type:"json",
						root:"rows",
						totalProperty:"totalCount"
					},
					writer:{
						type:"json"
					}
				},
				autoLoad:true
			});
			
<=====================================================================================================================================================================>
Ext4 中对readUrl的理解:

	//注意:me.readUrl是Ext系统只带的.该readUrl会默认将值赋予给proxy.url

	Ext.define('basebiz.store.Gqjfs',{
		extend: 'Ext.ux.data.Store',
		model: 'basebiz.model.Gqjfs',
		remoteSort: true,
		autoLoad: true,
		sorters: [{
			property: 'createDate',
			direction: 'DESC'
		}],
		constructor: function(config){
			var me = this;
			var config = config || {};
			
			me.saveOrUpdate = contextPath+'/basebiz/gqjfs/saveOrUpdate';
			me.destroy = contextPath+'/basebiz/gqjfs/delete';
			me.batchDelete = contextPath+'/basebiz/gqjfs/batchDelete';
			me.readUrl = contextPath+'/basebiz/gqjfs/selectList';
			me.printApproval = contextPath+'/basebiz/gqjfs/print';
			me.callParent([config]);
		}
	});

<=====================================================================================================================================================================>
Ext中的Tree与Tab的组合

	方法一:
	
		"westView treepanel":{
				itemclick:function(tree,record,item,index,eOPtions){
					var mainView = tree.up("mainViewLayout").down("centerView");
					self.addFunItem({
						tree:tree,
						record:record,
						mainView:mainView,
						funViewXtype:"departmentView",
						funController:"cn.department.controller.DepartmentController",
						funViewName:"cn.department.view.DepartmentView"
					});
				}
			}
		
		self.addFunItem=function(funInfo){
			if(funInfo){
				var flag = false;
				var tabs = funInfo.mainView;
				//var funPanel = tabs.down(funInfo.funViewXtype);
				var treeNode = funInfo.record.raw;
				var id = treeNode.id+"x";
				var text = treeNode.text;
				var tab = tabs.getComponent(id);//这里的Id最好不要是数字,否则可能出现异常
				
				if(!tab){//如果Tab不存在
					self.application.getController(funInfo.funController).init();
					var funViewXtype = funInfo.funViewXtype;
					var newTab = tabs.add({
						id:id,
						closable:true,
						title:text,
						xtype:funViewXtype
					});
					newTab.show();
				}else{
					tabs.setActiveTab(tab);
				}
			}
		};
		
	方法二:

		"westview treepanel":{
				itemclick:function(tree,record,item,index,e,eOpts){
					var mainView=tree.up("mainviewlayout").down("centerview");
					/**用户管理*/
					if(record.data["id"]=="usermanager"){
						self.addFunItem({
							mainView:mainView,
							funViewXtype:"userlayout",
							funController:"core.user.controller.UserController",
							funViewName:"core.user.view.UserLayout"
						});
						/*类别管理*/
					}
				}
			}
		
		this.addFunItem=function(funInfo){
			if(funInfo){
				var mainView=funInfo.mainView;
				var funPanel=mainView.down(funInfo.funViewXtype);
				if(!funPanel){
					self.application.getController(funInfo.funController).init();
					funPanel=Ext.create(funInfo.funViewName);
					mainView.add(funPanel);
					mainView.setActiveTab(funPanel);
				}else{									
					mainView.setActiveTab(funPanel);
				}
			}
		}

<=====================================================================================================================================================================>
Ext4.0中如何在一个类中定义自己的属性

	Ext.define("cn.department.view.DepartmentView",{
	extend:"Ext.panel.Panel",
	alias:"widget.departmentView",
	treeId:[],       //这是自己的属性
	title:"部门管理",
	closable:true,
	defaults:{
		bodyStyle:"padding:1px"
	},
	layout:"fit",
	setTreeId:function(treeId){
		this.treeId = treeId;
	},
	getTreeId:function(){
		return this.treeId;
	},
	html:"<font color='red'>红色</font>",
	initComponent:function(){
		//this.setTreeId();
		this.callParent(arguments);
	}
});

....................................................................................................
	其实也可以这样做
		 Ext.define("core.user.model.UserModel",{
			extend:"Ext.data.Model",
			fields:[
				{name:"id",type:"int",srotable:true},
				{name:"name",type:"string",srotable:true},//这些两个都是自定义属性
			]
		 });

<=====================================================================================================================================================================>
如何获取一个已经加载的store

	var departmentStore = Ext.getStore("cn.department.store.DepartmentStore");
					var proxy = departmentStore.getProxy();
					var url = proxy.url;
					url = url+"&name=123";
					alert(url);

<=====================================================================================================================================================================>
Ext4.0中mvc实现tree与grid的组合的一段重要的代码

	"westView treepanel":{
				itemclick:function(tree,record,item,index,eOPtions){
					var mainView = tree.up("mainViewLayout").down("centerView");
					self.addFunItem({  //调用self.addFunItem(funInfo)
						tree:tree,
						record:record,
						mainView:mainView,
						funViewXtype:"departmentView",
						funController:"cn.department.controller.DepartmentController",
						funViewName:"cn.department.view.DepartmentView"
					});
				}
			}
			
	self.addFunItem=function(funInfo){
			if(funInfo){
				var flag = false;
				var tabs = funInfo.mainView;
				//var funPanel = tabs.down(funInfo.funViewXtype);
				var treeNode = funInfo.record.raw;
				var id = treeNode.id+"x";
				var text = treeNode.text;
				var viewAlias = treeNode.qtitle;
				var tab = tabs.getComponent(id);//这里的Id最好不要是数字,否则可能出现异常
				
				if(!tab){//如果Tab不存在
					self.application.getController(funInfo.funController).init();
					var funViewXtype = funInfo.funViewXtype;
					var departmentStore = Ext.create("cn.department.store.DepartmentStore",{
						proxy:{
							type:"ajax",
							url:"department_list.action?id=1",
							reader:{
								type:"json",
								root:"rows",
								totalProperty:"totalCount"
							},
							writer:{
								type:"json"
							}
						},
					});
					var departmentGridView = Ext.create("cn.department.view.DepartmentGridView",{
						store:departmentStore
					});
					var departmentView = Ext.create("cn.department.view.DepartmentView",{
						items:departmentGridView
					});
					
					
					var newTab = tabs.add({
						id:id,
						closable:true,
						title:text,
						items:departmentView
						//xtype:viewAlias
					});
					newTab.show();
				}else{
					tabs.setActiveTab(tab);
				}
			}
		};

<=====================================================================================================================================================================>
items与xtype的区别:

	items 主要是向一个组件或对象中添加另一个组件或对象,而xtype则是利用一个类的别名去创建一个对象,当然也可以向一个组件或对象中添加另一个组件或对象

<=====================================================================================================================================================================>
Ext4.0中ajax的两种不同请求方式proxy用于类中,request用于方法中:
	
	proxy的范例:
	
		Ext.define("cn.department.store.DepartmentStore",{
			extend:"Ext.data.Store",
			model:"cn.department.model.DepartmentModel",
			pageSize:10,//每页显示5条
			//autoSync:true,//与服务器同步
			proxy:{
				type:"ajax",
				url:"",
				reader:{
					type:"json",
					root:"rows",
					totalProperty:"totalCount"
				},
				writer:{
					type:"json"
				}
			},
			autoLoad:true
		});
		
	request的范例:
	
		Ext.Ajax.request({
			waitMsg:"正在登陆,请稍后...",
			url:"user_login.action",
			params:{username:username,password:password},
			method:"POST",
			timeout:4000,
			success:function(response,options){
				var user = Ext.decode(response.responseText);
				if(user.username == username && user.password == password &&user.username != "" && user.username != ""){
					//var mainViewLayout = Ext.getCmp("mainViewLayout");
					//mainViewLayout.show();
					loginWindow.close();
					Ext.util.Cookies.set("username",username);  //设置Cookies
					Ext.util.Cookies.set("password",password);
					Ext.util.Cookies.set("remember",remember);
					Ext.util.Cookies.set("autoLogin",autoLogin);
				}else{
					Ext.Msg.alert("提示消息","用户名或密码错误!");
					Ext.util.Cookies.clear("username");
					Ext.util.Cookies.clear("password");
					Ext.util.Cookies.clear("remember");
					Ext.util.Cookies.clear("autoLogin");
				}
			}
		});
		
	.....................................................................
	对于Ext中的request如何做同步ajax请求及返回的案例:
	
	getReturnValueOfRolePrivilege:function(){
		var roleId = commonParams;
		var result = null;
		Ext.Ajax.request({
			waitMsg:"正在提交,请稍后...",
			url:"roleAction_getReturnValueOfRolePrivilege"+suffix,
			params:{id:roleId},
			method:"GET",
			async: false,   //ASYNC 是否异步( TRUE 异步 , FALSE 同步)
			timeout:4000,
			success:function(response,options){
				var obj = Ext.decode(response.responseText);
				if(obj.judge == "0000"){
					result = obj;
				}else{
					Ext.Msg.alert(
						"提示",
						"返回值出错了!"
					);
				}
			}
		});
		return result; //返回值一定放到这儿
	}

<=====================================================================================================================================================================>
Ext4.0对于Cookies的使用,都是基于浏览器的Cookies:

	Ext.util.Cookies.set("username",username); 
	var autoLogin = Ext.util.Cookies.get("autoLogin");
	Ext.util.Cookies.clear("username");

<=====================================================================================================================================================================>
Ext4.0中的类的属性,即配置项,我们如何使用:
	
	1,对于一些值为数值型,字符串型,布尔型的属性,我们可以再定义类时就赋予初值,但对于一些值是对象的属性,我们则只能通过对象去调用他的set与get方法来获取值,
	
<=====================================================================================================================================================================>
Ext4.0中Tree的右键菜单的实现:

	itemcontextmenu:function(tree,record,item,index,eOPtions){
					var idx = record.raw.id+"xx";
					var myTreeMenu = Ext.getCmp("myTreeMemu");
					if(myTreeMenu != null){
						myTreeMenu.close();
					}
					var contextMenu = Ext.create("Ext.menu.Menu",{
						id:"myTreeMemu",
						//closable:true,
						items:[{
							text:"添加兄弟节点",
							id:idx,
							handler:function(){
								alert(record.raw.id);
							}
						},{
							text:"添加子节点",
							id:idx+"x",
							handler:function(){
								alert(record.raw.id);
							}
						},{
							text:"编辑该节点",
							id:idx+"xx",
							handler:function(){
								alert(record.raw.id);
							}
						},{
							text:"删除该节点及子节点",
							id:idx+"xxx",
							handler:function(){
								alert(record.raw.id);
							}
						}]
					});
					eOPtions.preventDefault();
					contextMenu.showAt(eOPtions.getXY());
					//contextMenu.close();
				}

<=====================================================================================================================================================================>
Ext4.0中三种种获取record的方法:

	itemcontextmenu:function(tree,record,item,index,eOPtions){
		var nodeId = record.raw.id;
		var nodePerentId = record.data.parentId;
		var nodePerentId = record.data["parentId"];
	
	}

<=====================================================================================================================================================================>
Ext4.0中Tree如何刷新某一个节点

	var store = tree.getStore();
	store.load({node:store.getNodeById(parentName)}):  //刷新某一个节点
	
	store.load()://刷新整棵Tree

<=====================================================================================================================================================================>
Ext用for循环操作一个对象中的属性的用法实例:

	var formObj=baseForm.getForm();

	for(var field in defaultObj){

		var value=defaultObj[field];

	}

<=====================================================================================================================================================================>
Ext用each循环操作一个数组中的元素的用法实例:

	function(formObj,obj){
		var fields=formObj.getFields().items;
			Ext.each(fields,function(field){
				var value=Ext.value(obj[field.name],null);   //这句话表示的意思是:如何obj[field.name]的值为null,将第二个参数赋予给value,而obj[field.name]表示的
															意思是:如果obj对象的某个属性名等于field.name的值,那么久返回obj对象的这个属性名的值,否则返回为空
				formObj.findField(field.name).setValue(value);
			});
	}
<=====================================================================================================================================================================>
在Ext中自己写的一个页面,当一调用show()这个方法,就要在我写的显示页面中触发一个方法的做法:

	var loginWindow = Ext.create("cn.app.view.LoginWindow");
	var value = loginWindow.show(null,function(option){}); //当一调用这个函数就要触发下面这个函数
		
	......................................................................................................................
	
	Ext.define("cn.app.view.LoginWindow",{
	extend:"Ext.window.Window",
	title:"登陆系统",
	iconCls:"table_login",
	width:400,
	height:230,
	alias:"widget.loginWindow",
	modal:true,
	closable:true,
	closeAction:"destroy",
	listeners:{
		//当该登陆窗口一显示,就会被监听到,即运行这个方法,并且第一个参数是该窗体的对象
		show:function(){
			console.log(call);
			//console.log(loginWindow);
			
			var remember = Ext.util.Cookies.get("remember");
			var autoLogin = Ext.util.Cookies.get("autoLogin");
			if(autoLogin == "true"){
				autoLogin = Boolean(autoLogin);
			}else{
				autoLogin = false;
			}
			if(remember == "true"){
				remember = Boolean(remember);
			}else{
				remember = false;
			}
			
			if(remember){
					var username = Ext.util.Cookies.get("username");
					var password = Ext.util.Cookies.get("password");
					
					//设置表单的值
					loginWindow.down("form").getForm().findField("username").setValue(username);
					loginWindow.down("form").getForm().findField("password").setValue(password);
					loginWindow.down("checkbox[name=remember]").setValue(remember);
					if(autoLogin){
						loginWindow.down("checkbox[name=autoLogin]").setValue(autoLogin);
						Ext.Ajax.request({
								waitMsg:"正在登陆,请稍后...",
								url:"userAction_login.action",
								params:{loginName:username,password:password},
								method:"POST",
								timeout:4000,
								success:function(response,options){
									var user = Ext.decode(response.responseText);
									if(user.loginName == username && user.username != ""){
										
										loginWindow.close();
										Ext.util.Cookies.clear("username");
										Ext.util.Cookies.clear("password");
										Ext.util.Cookies.clear("remember");
										Ext.util.Cookies.clear("autoLogin");
										
										Ext.util.Cookies.set("username",username);
										Ext.util.Cookies.set("password",password);
										Ext.util.Cookies.set("remember",remember);
										Ext.util.Cookies.set("autoLogin",autoLogin);
									}else{
										Ext.Msg.alert("提示消息","用户名或密码错误!");
										Ext.util.Cookies.clear("username");
										Ext.util.Cookies.clear("password");
										Ext.util.Cookies.clear("remember");
										Ext.util.Cookies.clear("autoLogin");
									}
								}
						});
				}//第二个if
			}
		}
	},
	items:[{//用于占位作用,与所设置的heigth无关,主要是用于做登陆提示信息而留的
		ref:"logininfo",
		xtype:"displayfield",
		value:"",
		heigth:0,
		margin:"10 0 0 0"
	},{
		layout:"column",
		bodyStyle:"background:transparent",
		border:0,
		items:[{
			columnWidth:.7,  //注意 7前面有一个小点,表示0.7,因为参数columnWidth只能为百分比, 其值必须为0到1之间的小数(例如 .25).
			xtype:"form",
			ref:"loginform",
			border:1,
			//bodyStyle: 'background:red',
			defaults:{
				labelSeparator:":",
				labelWidth:40,
				width:200,
				labelAlign:"right",
				msgTarget:"side"
			},
			defaultType : 'textfield',
			bodyStyle: 'background:transparent',//设置为透明,不不妨碍更换主题了
			border:0,
			items:[{
				fieldLabel : "用户名",
				fieldCls : 'username',
				emptyText:"请输入用户名",
				name : 'username',
				margin : "10 10 10 50"
			}, {
				name : 'password',
				fieldLabel : '密&nbsp;&nbsp;&nbsp;码',
				fieldCls : 'password',
				emptyText:"请输入密码",
				inputType : 'password',
				margin : "20 10 10 50"
			}, {
				xtype:"checkbox",
				name : 'remember',
				boxLabel : '记住密码',
				boxLabelAlign : 'after',
				margin : "10 0 0 75"
			},{
				xtype:"checkbox",
				name : 'autoLogin',
				boxLabel : '自动登陆',
				boxLabelAlign : 'after',
				margin : "-18 0 0 165",
			}]//items
		},{
			layout:'fit',
			bodyStyle: 'background:transparent',//设置为透明,不不妨碍更换主题了
			border:0,
			columnWidth:.28,// //注意 7前面有一个小点,表示0.28,因为参数columnWidth只能为百分比, 其值必须为0到1之间的小数(例如 .25).
			items:[{
				xtype : "displayfield",
				hideLabel : true,
				margin : "0 0 0 0",
				value : "<img height=100 src='style/css/imgs/logo/logo.gif' />"
			}]
		}]//items
	}],
	buttons:[{
		xtype:"button",
		text:"登陆",
		ref:"login",
		width:50
	},{
		xtype:"button",
		text:"退出",
		width:50,
		handler:function(button){
			var loginWindow = button.up("loginWindow");
			Ext.Msg.confirm("提示","是否要退出系统",function(value){
				if(value == 'yes'){
					if(document.all){//IE
						window.open('', '_parent', '');
						window.close();
					}else{//FF
						window.open('', '_self', '');
						button.up("loginWindow").down("displayfield").setValue("<font color=red>提示：检测到当前是Firefox浏览器！请在址栏上输入about:config然后回车;搜索dom.allow_scripts_to_close_windows双击修改值为true再试此功能，这样才能关闭窗口</font>");
						window.close();
					}
				}
			},this);
		}
	}]
	
});

<=====================================================================================================================================================================>
Ext4中如何提交一个form表单的案例:

	"addRoleWindowView button[ref=addRoleButton]":{
				click:function(button){
					var form = button.up('form').getForm();
					var nameObj = form.findField("name");
					nameObj.setValue("3333");
					var name = nameObj.getValue();
					alert(name);
		            if (form.isValid()) {
		                form.submit({
		                    success: function(form, action) {
		                       Ext.Msg.alert('保存成功', action.result.msg);
		                    },
		                    failure: function(form, action) {
		                        Ext.Msg.alert('操作失败', action.result.msg);
		                    }
		                });
		            }
				}
			}

<=====================================================================================================================================================================>
关于combobox的回显问题的解决案例:

	如果combobox使单选模式,那么案例如下:
	
		form.findField("departmentId").setValue("708"); //其中 "708" 是combobox的提交值,至于显示就不用我们关心了,它会自动给我们发起ajax请求来回显对应的显示值
		
	如果combobox使多选模式,那么案例如下:
	
		var roleIds = new Array();
		roleIds.push("504","501"); //其中 "504","501" 是combobox的提交值,在对选模式下我们需要将多个提交值封装为数组
		form.findField("roleIds").setValue(roleIds); //至于显示就不用我们关心了,它会自动给我们发起ajax请求来回显对应的显示值

<=====================================================================================================================================================================>
解决Extjs4中form表单提交后无法进入success函数问题

	1.首先得确定json格式没问题 

	2.在返回的json中一定得加上success为true，因为只有为true，才会进入success函数 

	因为刚结束Extjs4，这个错误我调试了半天。

<=====================================================================================================================================================================>
ext4中grid如何做多选:

	注意点：
		1、需要在JS文件中动态加载“'Ext.selection.CheckboxModel'”
		2、服务端要返回数据的id值。
		3、Ext.data.Model中，要有id的信息，就是因为JS代码中忘记了写id，导致调试了很久都无法获取id值，从头检查代码的时候才发现错误。

	关键代码:
	
		"roleGridView button[id=deleteRoleGridViewId]":{
				click:function(button){
					var grid = button.up("roleGridView");
					var record = grid.getSelectionModel().getSelection();  //得到被选择的行数据
					if(record.length == 0){
						Ext.MessageBox.show({
							title:"提示",
							msg:"请选择你要操作的记录!"
						});
						return;
					}else{
						var ids = new Array();
						for(var i= 0;i<record.length;i++){
							ids[i]= record[i].get("id"); //得到行数数据中id列的值
							
						}
						Ext.Ajax.request({
							waitMsg:"正在执行删除,请稍后...",
							url:"roleAction_delete"+suffix,
							params:{ids:ids},
							method:"GET",
							timeout:4000,
							success:function(response,options){
								var user = Ext.decode(response.responseText);
								
							}
						});
					}
				}
			}

<=====================================================================================================================================================================>
Ext中可以自动打开和关闭的消息盒子:

	提示:这个消息盒子是没有任何按钮的.

		Ext.MessageBox.show({
			title:"提示",
			msg:"请选择你要操作的记录!"
		});
	
<=====================================================================================================================================================================>
Ext4中复选框树的经典实用案例:

		/**
	 * 设置权限的控制器
	 */
	Ext.define("cn.role.controller.SetPrivilegeWindowViewController",{
		extend:"Ext.app.Controller",
		initSetPrivilegeWindowView:function(){
			var self = this;
			var setPrivilegeWindowViewController = {
				
				/**
				 * 当权限树复选框的值被选中时,触发该事件
				 * @param {Object} record
				 * @param {Object} checked
				 */
				"setPrivilegeWindowView treepanel":{
					checkchange:function(record, checked){
						//级联孩子
						self.cascadeChildrens(record, checked);
						//级联父亲
						self.cascadeParent(record, checked);
					}
				},
				
				/**
				 * 当点击确定按钮是触发该事件
				 * @param {Object} button
				 */
				"setPrivilegeWindowView button[id=ensureSetPrivilegeWindowViewId]":{
					click:function(button){
						var privilegeTree = button.up('setPrivilegeWindowView').down('treepanel');
						var rootNode = privilegeTree.getRootNode();
						var firstChildNodes = rootNode.childNodes;
						var arrs = new Array();
						if(firstChildNodes.length != 0){
							arrs = self.getSelectedPrivilege(firstChildNodes,arrs);
						}
						if(arrs.length !=0){
							self.submitSelectedValue(arrs);
						}
					}
				}
			}
			Ext.apply(self.ctr,setPrivilegeWindowViewController);
		},
		
		/**
		 * 向后台提交被选中的值
		 * @param {Object} arrs
		 */
		submitSelectedValue:function(arrs){
			var roleId = commonParams;
			commonParams = null;//将公共参数清空是为了避免意想不到的错误
			Ext.Ajax.request({
				waitMsg:"正在提交,请稍后...",
				url:"roleAction_setPrivilege"+suffix,
				params:{privilegeIds:arrs,id:roleId},
				method:"POST",
				timeout:4000,
				success:function(response,options){
					var obj = Ext.decode(response.responseText);
					alert(obj.judge);
				}
			});

		},
		
		/**
		 * 得到被选中的权限,并将其封装为数组返回
		 * @param {Object} childNodes 下一级孩子节点
		 * @param {Object} arrs 用于返回的数组参数
		 */
		getSelectedPrivilege:function(childNodes,arrs){
			var self = this;
			for(var i=0;i<childNodes.length;i++){
				var childNode = childNodes[i];
				var data = childNode.data;
				var id = data.id;
				var checked = data.checked;
				if(checked){
					arrs.push(id);
				}
				var nextChildNodes = childNode.childNodes;
				if(nextChildNodes.length != 0){
					self.getSelectedPrivilege(nextChildNodes,arrs);
				}
			}
			return arrs;
		},

		/**
		 * 级联孩子
		 */
		cascadeChildrens:function(record, checked){
			var self = this;
			if(checked){
				var childNodes = record.childNodes;
				for(var i=0;i<childNodes.length;i++){
					var childNode = childNodes[i];
					var data = childNode.data;
					var childChecked = data.checked;
					if(!childChecked){
						 childNode.set('checked', true);//这一行代码是很重要的,在Ext的官方的api是查不到的
					}
					self.cascadeChildrens(childNode,true);
				}
			}else{
				var childNodes = record.childNodes;
				for(var i=0;i<childNodes.length;i++){
					var childNode = childNodes[i];
					var data = childNode.data;
					var childChecked = data.checked;
					if(childChecked){
						 childNode.set('checked', false);//这一行代码是很重要的,在Ext的官方的api是查不到的
					}
					self.cascadeChildrens(childNode,false);
				}
			}
		},
		
		/**
		 * 级联父亲
		 * @param {Object} record
		 * @param {Object} checked
		 */
		cascadeParent:function(record, checked){
			var self = this;
			var siblingFlag = self.checkSibling(record, checked);
			if(siblingFlag){
				var parentNode = record.parentNode;
				if(parentNode != null){
				var data = parentNode.data;
					var parentChecked = data.checked;
					if(!parentChecked){
						 parentNode.set('checked', true);//这一行代码是很重要的,在Ext的官方的api是查不到的
					}
					self.cascadeParent(parentNode,true);
				}
			}else{
				var parentNode = record.parentNode;
				if(parentNode != null){
				var data = parentNode.data;
					var parentChecked = data.checked;
					if(parentChecked){
						 parentNode.set('checked', false);//这一行代码是很重要的,在Ext的官方的api是查不到的
					}
					self.cascadeParent(parentNode,false);
				}
			}
		},
		
		/**
		 * 检查自己及兄弟节点
		 * @param {Object} record
		 * @param {Object} checked
		 * @return {TypeName} 返回true,表示兄弟节点还有选中的,返回false表示兄弟节点没有选中的了.
		 */
		checkSibling:function(record, checked){
			var self = this;
			var selfChecked = record.data.checked;
			if(selfChecked){
				return true;
			}else{
				var nextSibling = record.nextSibling; //下一个兄弟节点
				if(nextSibling != null){
					var nextFlag = self.checkNextSibling(nextSibling, null);
					if(nextFlag){
						return true;
					}
				}
				var previousSibling = record.previousSibling; //上一个兄弟节点
				if(previousSibling != null){
					var previousFlag = self.checkPreviousSibling(previousSibling, null);
					if(previousFlag){
						return true;
					}
				}
			}
			return false;
		},
		
		/**
		 * 检查下一个兄弟节点
		 * @param {Object} record
		 * @param {Object} checked
		 * @return {TypeName} 返回true,表示兄弟节点还有选中的,返回false表示兄弟节点没有选中的了.
		 * 返回null表示没有下一个兄弟节点
		 */
		checkNextSibling:function(nextSibling, checked){
			var self = this;
			var data = nextSibling.data;
			var nextSiblingchecked = data.checked;
			if(nextSiblingchecked){
				return true;
			}else{
				nextSibling = nextSibling.nextSibling; //下一个兄弟节点
				if(nextSibling != null){
					var nextFlag = self.checkNextSibling(nextSibling, null);
					if(nextFlag){
						return true;
					}
				}
			}
			return false;
		},
		
		/**
		 * 检查上一个兄弟节点
		 * @param {Object} record
		 * @param {Object} checked
		 * @return {TypeName} 返回true,表示兄弟节点还有选中的,返回false表示兄弟节点没有选中的了.
		 * 返回null表示没有上一个兄弟节点
		 */
		checkPreviousSibling:function(previousSibling, checked){
			var self = this;
			var data = previousSibling.data;
			var previousSiblingchecked = data.checked;
			if(previousSiblingchecked){
				return true;
			}else{
				previousSibling = previousSibling.previousSibling; //上一个兄弟节点
				if(previousSibling != null){
					var nextFlag = self.checkPreviousSibling(previousSibling, null);
					if(nextFlag){
						return true;
					}
				}
			}
			return false;
		}
	});

<=====================================================================================================================================================================>
对于window与panel组件的Id的使用说明:

	对于window与panel组件,我们可以为其加上一个id,然后我们在js代码的全局的任何地方都可以用Ext.getCmp('xxId'); 去获得我们的组件

<=====================================================================================================================================================================>
Ext中某些类后面跟有singleton的,那么他就相当于是静态类了,不用关键字 new 去得到对象了,例如Ext.Array

<=====================================================================================================================================================================>
关于Ext4中类的理解及解释

	Ext.define("cn.application.view.ApplicationGridView",{
		extend:"Ext.grid.Panel",
		alias:"widget.applicationGridView",
		store:'',
		myField1:123,   //这是自定义的属性
		multiSelect:true,
		frame:true,
		enableKeyNav:true,//可以用键盘控制上下
		columnLines:true,//展示竖线
		disableSelection:false,//值为true表示禁止选择行
		selModel:Ext.create("Ext.selection.CheckboxModel"),
		dockedItems:[{
			dock:'top',
			xtype:'toolbar',
			items:{width: 300, fieldLabel: '搜索', labelWidth: 50, xtype: 'mySearchField', store:''}
		}],
		columns:[
			{xtype:"rownumberer"},
			{text:"编号",dataIndex:"id",width:100},
			{text:"申请标题",dataIndex:"title",width:200,border:1},
			{text:"申请时间",dataIndex:"applyTime",width:100},
			{text:"状态",dataIndex:"status",width:100},
		],
		bbar:[{
			xtype:"pagingtoolbar",
			store:'',
			displayInfo:true,
			displayMsg:"显示{0}-{1}条,共计{1}条",
			emptyMsg:"没有数据"
		}],
		
		myFunction:function(){ //这是自定义方法
			
		},
		
		initComponent:function(){ 这是构造方法,但是 model 与store 好像没有这个构造方法, 如果要得到或改变当前类的属性,就要在me.callParent(arguments);这个方法之前使用
			var me = this;
			alert(me.myField1);
			var store = Ext.create('cn.application.store.ApplicationStore');
			alert(store.myField);  //myField是 cn.application.store.ApplicationStore 这类自定义的属性,
			store.myField = 2345; 
			alert(store.myField);
			me.store = store;
			me.bbar[0].store = store;
			me.dockedItems[0].items.store = store;  //这个用法很重要,可以给我其他的启示
			
			me.callParent(arguments);
			
		}
	});

	............................................................................................................
	如何使用Ext中create创建对象并传参
	
		var application = Ext.create('cn.application.view.ApplicationGridView',{myField1:1234});
		alert(application.myField1); //得到所传的参数

<=====================================================================================================================================================================>		
关于store中proxy的添加参数的方法的案例: 

	案例一:

		Ext.define('cn.application.util.MySearchField', {
			extend: 'Ext.form.field.Trigger',
			alias: 'widget.mySearchField',
			
			trigger1Cls: Ext.baseCSSPrefix + 'form-clear-trigger',
			trigger2Cls: Ext.baseCSSPrefix + 'form-search-trigger',

			hasSearch : false,
			paramName : 'query',

			initComponent: function() {
				var me = this;
				me.callParent(arguments);
				me.on('specialkey', function(f, e){
					if (e.getKey() == e.ENTER) {
						me.onTrigger2Click();
					}
				});
				
				// 开启远程过滤
				me.store.remoteFilter = true;
				//设置过滤参数名称
				if (!me.store.proxy.hasOwnProperty('filterParam')) {
					me.store.proxy.filterParam = me.paramName;
				}
				me.store.proxy.encodeFilters = function(filters) {
					return filters[0].value;
				}
			},

			afterRender: function(){
				this.callParent();
				this.triggerCell.item(0).setDisplayed(false);
			},

			onTrigger1Click : function(){
				var me = this;

				if (me.hasSearch) {
					me.setValue('');
					me.store.clearFilter();
					me.hasSearch = false;
					me.triggerCell.item(0).setDisplayed(false);
					me.updateLayout();
				}
			},

			onTrigger2Click : function(){
				var me = this,
					value = me.getValue();

				if (value.length > 0) {
					//设置过滤参数的值
					me.store.filter({
						id: me.paramName,
						property: me.paramName,
						value: value
					});
					me.hasSearch = true;
					me.triggerCell.item(0).setDisplayed(true);
					me.updateLayout();
				}
			}
		});

	........................................................................................................................
	案例二:
	
		Ext.define('cn.application.util.MySearchComboBox', {
			extend: 'Ext.toolbar.Toolbar',
			alias: 'widget.mySearchComboBox',
			height:"0px",
			width:"0px",
			style:"border:0px ",
			layout:"absolute",
			store:'',
			hasSearch:false,
			filterParamName:"query",
			filterParamValue:"",
			firstParamName:"firstQuery",
			secondParamName:"secondQuery",
			items:[{
					x:0,
					y:0,
					width:55,
					height:20,
					text:"部门名称:",
					xtype:"label"
					//style:{border:"1px solid red",align:"center"}
				},{
					x:60,
					y:0,
					width:150,
					height:20,
					id:"firstQueryId",
					xtype:"combobox",
					store: "cn.user.store.SelectDepartmentStore",
					displayField: 'name',
					valueField: 'id',
					name:"departmentId",
					allowBlank:false,
				},{
					x:220,
					y:0,
					width:55,
					height:20,
					text:"部门名称:",
					xtype:"label"
					//style:{border:"1px solid red",align:"center"}
				},{
					x:280,
					y:0,
					width:150,
					height:20,
					id:"secondQueryId",
					xtype:"combobox",
					store: "cn.user.store.SelectDepartmentStore",
					displayField: 'name',
					valueField: 'id',
					name:"departmentId",
					allowBlank:false,
				},{
					x:450,
					y:0,
					width:50,
					height:20,
					text:" 查询 ",
					xtype:"button",
					id:"mySelectQuery"
				}],

			initComponent: function() {
				var me = this;
				me.callParent(arguments);
				me.store.remoteFilter = true; //开启远程过滤
				
				//所使用的store中添加查询的参数
				if (!me.store.proxy.hasOwnProperty('filterParam')) {
					me.store.proxy.filterParam = me.filterParamName;
				}
				
				me.store.proxy.encodeFilters = function(filters) {
					return filters[0].value;
				}
				var mySelectQuery = Ext.getCmp("mySelectQuery");
				mySelectQuery.on('click', function(f, e){
					me.setSelectQueryValue();
				});
			},
			
			/**
			 * 设置查询的参数值
			 */
			setSelectQueryValue:function(){
				var me = this;
				var firstQueryValue =Ext.getCmp("firstQueryId").getValue();
				var secondQueryValue =Ext.getCmp("secondQueryId").getValue();
				var extraParams = "{"+me.firstParamName+":"+firstQueryValue+","+me.secondParamName+":"+secondQueryValue+"}";
				extraParams = eval('('+extraParams+')');
				
				me.store.proxy.extraParams = extraParams;
				me.store.filter({
					id: me.filterParamName,
					property: me.paramName,
					value: me.filterParamValue
				});
			}
			
		});

<=====================================================================================================================================================================>
Ext4中关于获取已经创建的对象中的属性值方法:

	例如:
	
		Ext.define("cn.waitingApproval.view.AddWaitingApprovalWindowView",{
			extend:"Ext.window.Window",
			alias:"widget.addWaitingApprovalWindowView",
			title:"审批处理",
			modal:true,
			width:"520px",
			height:"230px",
			tbar: [
				{ xtype: 'button', text: '下载申请文档',id:'downloadApplicationDocumentButton' },
			],
			items:{
				xtype:"form",
				width:"100%",
				//url:"waitingApprovalAction_add"+suffix,
				layout:"absolute",
				defaultType:"textfield",
				items:[{
					xtype: 'hiddenfield',
					name: 'id'
				},{
					x:10,
					y:10,
					width:60,
					height:30,
					text:"审批意见:",
					xtype:"label"
				},{
					x:65,
					y:10,
					width:"85%",
					height:90,
					xtype:"textarea",
					name:"description"
				},{
					x:10,
					y:110,
					width:75,
					height:30,
					text:"选择下一步:",
					xtype:"label"
				},{
					x:80,
					y:108,
					width:120,
					height:30,
					xtype:"combobox",
					store: "cn.waitingApproval.store.SelectNextActivityStore",
					displayField: 'activityName',
					valueField: 'activityName',
					name:"activityName",
					allowBlank:false,
				}],
				buttons:[{
					text:"提交",
					ref:"addWaitingApprovalButton"
				}]
			},
			initComponent:function(){
				this.callParent(arguments);
			}
		});

	>> : 创建一个对象 
		var addWaitingApproval = Ext.create("cn.waitingApproval.view.AddWaitingApprovalWindowView");
		
	>> : 获取一般的属性值:
		var width = addWaitingApproval.width;
		alert(width);
		
	>> : 获取一般属性下的子属性,该子属性中含有 xtype 配置项.但并不是 xtype 的子属性
		var width = addWaitingApproval.items.width;
		alert(width);
	
	>> : 获取一般属性的子属性,但该子属性中含有 xtype 配置项, 并且获取的是该 xtype 的子属性
		var store = addWaitingApproval.down("combobox").store; //要或一般属性下 xtype 的对象暂时只能用这个办法
		store.proxy.extraParams = {taskId:taskId};	
	
<=====================================================================================================================================================================>
Ext中如何为某一个组件绑定事件案例:

	extjs 中 给组件添加click 事件是怎么关联到dom事件的？5
 
		var element = Ext.get('domid');  
		var component = Ext.getCmp('domid')  
		
		 各添加一个click事件

		element.on('click',function(){});  
		component.on('click',function(){});  

<=====================================================================================================================================================================>
Ext如何在view层中却出store层的东西和在Ext如何创建一个元素和改元素的属性:


---start-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
这是view层 

	Ext.define('basebiz.view.zfxzcf.HasPassedIndex',{
		extend: 'Ext.ux.panel.Panel',
		border: false,
		layout: {
			type: 'vbox',
			align: 'stretch'
		},
		flex: 1,
		initComponent: function(){
			var me = this;
			var list = Ext.create('basebiz.view.zfxzcf.List',{
				store: Ext.create('basebiz.store.Zfxzcf',{tabType:'hasPassed'})   //创建一个store层的对象
			});
			
			var tbar = Ext.create('Ext.toolbar.Toolbar',{
				border: 0,
				items: [{
					text: '导出数据',iconCls: 'icon-export',handler: function(b){
						var records = list.getSelectionModel().getSelection();
						if(records.length != 1){
							Ext.ux.Msg.error('请选择一条数据进行查看操作！');
							return;
						}
						var id = records[0].data.id;
						if(Ext.isEmpty(document.exportForm)){
							var form = document.createElement('form');
							Ext.fly(form).set({
								method: 'POST',
								name: 'exportForm',
								action: list.store.exportData 
							});
							document.body.appendChild(form);
							var in1 = document.createElement('input');
							Ext.fly(in1).set({type:'hidden',name:'id',value:id});
							form.appendChild(in1);
						}else{
							document.exportForm.id.value = id;
						}
						document.exportForm.submit();
					}
				}]
			});
			me.items = [tbar,list];
			me.callParent(arguments);
		}
	});
	
----end----------------------------------------------------------------------------------------------------------------------------------------------------------------------
---start-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
这是store层

	Ext.define('basebiz.store.Zfxzcf',{
		extend: 'Ext.ux.data.Store',
		model: 'basebiz.model.Zfxzcf',
		tabType: 'apply',
		autoLoad: true,
		sorters: [{
			property: 'createDate',
			direction: 'DESC'
		}],
		constructor: function(config){
			var me = this;
			var config = config || {};
			me.tabType = config.tabType || me.tabType;

			me.exportDocCfspd = contextPath+'/basebiz/zfxzcf/exportDocCfspd';
			me.exportDocJbspd = contextPath+'/basebiz/zfxzcf/exportDocJbspd';
			me.exportDocNotice = contextPath+'/basebiz/zfxzcf/exportDocNotice';
			me.downloadFj = contextPath+'/basebiz/zfxzcf/downloadFj';
			me.exportData = contextPath+'/basebiz/zfxzcf/exportData';
		
			switch(me.tabType){
			case 'unAssign':
				me.readUrl = contextPath+'/basebiz/zfxzcf/unAssignList';
				break;
			case 'unDeal':
				me.readUrl = contextPath+'/basebiz/zfxzcf/unDealList';
				break;
			}
			
			me.callParent([config]);
		}
	});	

<=====================================================================================================================================================================>
管于Ext中较深的json对象:例如:person.name这样的mode层与grid的column列是如何处理的:
	2.关于日期的格式是如何处理
	请看如下的例子:

	mode:
	
		Ext.define('basebiz.model.CydjpdSingle', {
			extend: 'Ext.data.Model',
			idProperty: 'id',
			fields: [{
				name: 'id',type: 'string'
			},{
				// 批准日期
				name: 'pzrq',type: 'string',convert: function(v,r){return Ext.Date.format(v?new Date(v):null,'Y-m-d');}
			},{
				// 验收时间
				name: 'yssj',type: 'string',convert: function(v,r){return Ext.Date.format(v?new Date(v):null,'Y-m-d');}
			},{
				// 建议处遇等级
				name: 'jycydj.mc',mapping: 'jycydj.mc',type: 'string'
			},{
				name: 'jycydj.id',mapping: 'jycydj.id',type: 'string'
			},{
				name: 'jycydjxh',mapping: 'jycydj.xh',type: 'string'
			},{
				name: 'ycydjxh',mapping: 'cdqxx.cydj.xh',type: 'string'
			},{
				// 变动原因
				name: 'bdyy',type: 'string'
			},{
				// 原处遇等级
				name: 'ycydj', type: 'string'
			},{
				// 是否符合老、弱、病、残
				name: 'lrbc',type: 'string'
			},{
				// 是否符合老、弱、病、残
				name: 'sflrbc',type: 'string',convert: function(v){return v== '1' ? '是':'否';}
			},{
				// 标准考核分积分
				name: 'bzkhf',type: 'string'
			},{
				// 原始考核分积分
				name: 'yskhf',type: 'string'
			},{
				// 定期考核期
				name: 'dqkhq',type: 'string'
			}
			,{
				// 备注
				name: 'bz',type: 'string'
			},{
				//所属监区Id
				name: 'ssjqId',type: 'string'
			},{
				//所属监区
				name: 'ssjq',type: 'string'
			},{
				name: 'cjjgName',mapping: 'cjjg.xm',type: 'string'
			},{
				// 附件
				name: 'fj',type: 'string'
			},{
				name: 'spzt',type: 'string'
			},{
				name: 'processMark',type: 'boolean'
			},{
				name: 'processId',type: 'string'
			},{
				name: 'createDate',type: 'string',convert: function(v,r){return Ext.Date.format(v?new Date(v):null,'Y-m-d H:i:s');}
			},{
				name:'age',mapping:'cdqxx.baseInfo.csrq',type:'string',convert: function(v,r){  //利用这种方式(出生日期)获取年龄的方式是非常好的办法
					if(v){
						var d1 = new Date(v);
						var d2 = new Date();
						return d2.getFullYear()-d1.getFullYear();
					}
					return '';
				}
			},{
				name: 'createMode',type: 'string'
			},{
				name: 'ccid',mapping: 'cdqxx.id',type: 'string'
			},{
				name: 'cdqxx.id',mapping: 'cdqxx.id',type: 'string'
			},{
				name: 'cdqxx.baseInfo.xm',mapping: 'cdqxx.baseInfo.xm',type: 'string'
			},{
				name: 'cdqxx.baseInfo.zfbh',mapping: 'cdqxx.baseInfo.zfbh',type: 'string'
			},{
				name: 'zfdah',mapping: 'cdqxx.baseInfo.zfdah',type: 'string'
			},{
				name: 'gyjq',mapping: 'cdqxx.gyjq.jgmc',type: 'string'
			},{
				name: 'zfzt',mapping: 'cdqxx.zfzt.name',type: 'string'
			},{
				name: 'cjjg.xm',mapping: 'cjjg.xm',type: 'string'
			}]
		});

------------------------------------------------------------------------------------------------------------------------------------------------
view层的column中:

	Ext.define('basebiz.view.cydjpdSingle.List',{
	extend: 'Ext.grid.Panel',
	forceFit: true,
	collapsible: false,
    autoScroll: true,
    loadMask: true,
    flex: 1,
    verticalScroller: {
        variableRowHeight: true
    },
    columns: [{
    	xtype: 'rownumberer',width: 40,align:'center'
    },{
    	header: '姓名',dataIndex: 'cdqxx.baseInfo.xm', align:'center'
    },{
    	header: '罪犯编号',dataIndex: 'cdqxx.baseInfo.zfbh', align:'center'
    },{
    	header: '原处遇等级',dataIndex: 'ycydj', align:'center',queryConfig:{
			inputType: Ext.create('Ext.form.field.ComboBox',{
				width: 235,
				pageSize: 10,
				editable:false,
				displayField: 'mc',
				valueField: 'mc',
				allowBlank: false,
				store: Ext.create('criminal.store.Cydj')
			})
		}
    },{
    	header: '现在处遇等级',dataIndex: 'jycydj.mc', align:'center',queryConfig:{
			inputType: Ext.create('Ext.form.field.ComboBox',{
				width: 235,
				pageSize: 10,
				editable:false,
				displayField: 'mc',
				valueField: 'mc',
				allowBlank: false,
				store: Ext.create('criminal.store.Cydj')
			})
		}
    }/*,{
    	header: '标准考核分',dataIndex: 'bzkhf' , align:'center',queryConfig:{
			inputType:Ext.create('Ext.form.field.Number',{allowBlank:false,allowDecimals:false})
		}
    },{
    	header: '原始考核分',dataIndex: 'yskhf', align:'center',queryConfig:{
			inputType:Ext.create('Ext.form.field.Number',{allowBlank:false,allowDecimals:false})
		}
    }*/,{
    	header: '变动原因',dataIndex: 'bdyy',sortable: false, align:'center'
    },{
    	header: '批准日期',dataIndex: 'pzrq', align:'center',queryConfig:{
			inputType:Ext.create('Ext.ux.form.field.DateTime',{
				width:135,
				config:{ dateFmt:'yyyy-MM-dd'},
				allowBlank:false
		    })
		}
    },{
    	header:'所在监区',dataIndex:'gyjq',align:'center'
    }/*,{
    	header: '创建警官',dataIndex: 'cjjg.xm', align:'center'
    },{
    	header: '审批状态',dataIndex: 'spzt' , align:'center'
    }*/],
	initComponent: function(){
		var me = this;
		var beforeload = function(s,o,e){
			if(me.getExtraParams)s.proxy.extraParams = me.getExtraParams();
		};
		var loadfun = function(th,records,success){
			if(success){
				var ids = [],selrecs = [];
				Ext.Array.each(me.getSelectionModel().getSelection(),function(record){
					ids.push(record.getId());
				});
				Ext.Array.each(records,function(record){
					if(Ext.Array.contains(ids,record.getId()))selrecs.push(record);
				});
				me.selModel.select(selrecs);
			}
		};
		if(me.store){
			me.store.addListener({'beforeload':beforeload,'load':loadfun});
		}else{
			me.store = Ext.create('basebiz.store.CydjpdSingle',{listeners:{beforeload:beforeload,load:loadfun}});
		}
		var pageSizePager = Ext.create('Ext.ux.PageSizePager');
		me.bbar = Ext.create('Ext.ux.toolbar.Paging',{
			dock: 'bottom',
			displayInfo: true,
			list: me,
			plugins:[pageSizePager]
		});
		me.collection = new Ext.util.MixedCollection();
		me.selModel = Ext.create('Ext.ux.selection.CheckboxModel',{collection:me.collection});
		me.callParent(arguments);
	}
});

------------------------------------------------------------------------------------------------------------------------------------------------
store层:

	Ext.define('basebiz.store.CydjpdSingle',{
	extend: 'Ext.ux.data.Store',
	model: 'basebiz.model.CydjpdSingle',
	tabType: 'apply',
	autoLoad: true,
	sorters: [{
        property: 'createDate',
        direction: 'DESC'
    }],
	constructor: function(config){
		var me = this;
		var config = config || {};
		me.tabType = config.tabType || me.tabType;
		
		me.save = contextPath+'/basebiz/cydjpdSingle/save';
		me.update = contextPath+'/basebiz/cydjpdSingle/update';
		me.destroy = contextPath+'/basebiz/cydjpdSingle/delete';
		me.batchDelete = contextPath+'/basebiz/cydjpdSingle/batchDelete';
		me.startProcess = contextPath+'/basebiz/cydjpdSingle/startProcess';
		me.saveAndStart = contextPath+'/basebiz/cydjpdSingle/saveAndStart';
		me.claim = contextPath+'/basebiz/cydjpdSingle/claim';
		me.check = contextPath+'/basebiz/cydjpdSingle/check';
		me.backToNode = contextPath+'/basebiz/cydjpdSingle/backToNode';
		me.getImage = contextPath+'/basebiz/cydjpdSingle/getImage';
		me.claimValidation = contextPath+'/basebiz/cydjpdSingle/claimValidation';
		me.checkValidation = contextPath+'/basebiz/cydjpdSingle/checkValidation';
		me.backNodes = contextPath+'/basebiz/cydjpdSingle/backNodes';
		me.checkHisList = contextPath+'/basebiz/cydjpdSingle/checkHisList';
		me.backHisList = contextPath+'/basebiz/cydjpdSingle/backHisList';
		me.readUrl = contextPath+'/basebiz/cydjpdSingle/applyList';
		me.deleteRuntime = contextPath+'/basebiz/cydjpdSingle/deleteRuntime';
		me.print = contextPath+'/basebiz/cydjpdSingle/print';
		me.downloadFj = contextPath+'/basebiz/cydjpdSingle/downloadFj';
		
		switch(me.tabType){
		case 'unAssign':
			me.readUrl = contextPath+'/basebiz/cydjpdSingle/unAssignList';
			break;
		case 'unDeal':
			me.readUrl = contextPath+'/basebiz/cydjpdSingle/unDealList';
			break;
		case 'runtime':
			me.readUrl = contextPath+'/basebiz/cydjpdSingle/runtimeList';
			break;
		case 'done':
			me.readUrl = contextPath+'/basebiz/cydjpdSingle/doneList';
			break;
		}
		
		me.callParent([config]);
	}
});

<=====================================================================================================================================================================>
Ext中如何自己构造一个静态的store

	var sfStore = Ext.create('Ext.data.Store',{
			fields: ['value'],
			data: [{'value':'是'},{'value':'否'}]
		});

<=====================================================================================================================================================================>
在Ext中如何设置一个空的组件:

	在Ext中有时我们要在一个地方进行判断该位置是否有有一个组件,这是我们如果我们在对一个组件赋值为 var item = {} 或者 var item = [] ,在组件都会界面上显示一根横杠,直接赋值为空
	是不行的,这是我们赋值为如下的代码代码就可:
	
	var item ={
			    	border: false,
			    	layout: {
			    		type: 'hbox',
			    		align: 'middle'
			    	}
				};
				
	................................................................................................................
	在该空组件添加组件
	var item = {
			border: false,
			layout: {
				type: 'hbox',
				align: 'middle'
			},
			items: [{name: 'sfsb',xtype: 'combo',fieldLabel: '是否上报省局',value: '否',
				store: sfStore,
				displayField: 'value',valueField: 'value',editable: false,emptyText: '请选择...'
				},{
				xtype: 'displayfield',value: '<span style="color:red;font-weight:bold" data-qtip="Required"> *注：按照司法部监狱管理局《罪犯离监就医工作规定》</span>',flex: 1
			}]
		
		};

<=====================================================================================================================================================================>
在Ext4中如何控制grid的某一列是否显示和如何得到选中的某一行的某一列的值:

	{
		name: 'jbs',xtype: 'displayfield',fieldLabel: '禁闭室',
		listeners:{
			afterrender:function(me){
				var jbs2 = records[0].get('cflb.xzmc');
				if(jbs2 != '禁闭')
					me.setVisible(false);
			}
		}
	}
	...................................................................................................
	例如该列的dataIndex的是为 'mc',还可以这样得到
	
		var mc = records[0].data.mc;

<=====================================================================================================================================================================>
在Ext4中如何重写grid的列中的getSortParam()函数:

	{header: '是否锁定',  dataIndex: 'accountLocked2',align:'center',  flex: 1,
	  listeners:{
		  afterrender:function(me,object){
			  me.getSortParam=function(){
				  return "accountLocked";
			  }
		  }
	}},

<=====================================================================================================================================================================>
在Ext中当一个form表单用来form.loadRecord(me.record);这个函数,我们要清空form表单中id中的值,如何做?

	form.getRecord().set('id','');
	form.getForm().findField('id').setValue("");
	form.getRecord().raw.id = '';
	
<=====================================================================================================================================================================>
Ext中用	Ext.Ajax.request({})访问将返回的值封装在model中的案例

	前端:
	
			me.reload=function(ccid){
				if(!Ext.isEmpty(ccid)){
					Ext.ux.Ajax.request({
						method: 'POST',
						params: {id:ccid},
						async:false,
						url: contextPath+'/criminal/currentInfo/findById',
						success: function(response){
							var proxy = Ext.create('Ext.data.proxy.Proxy',{model:'criminal.model.SelectCriminal'});
							me.record = proxy.reader.read(response).records[0];
							//var record = proxy.reader.read(response).records[0];
							if(Ext.isEmpty(me.record.data['dqxq']))me.record.data['dqxq']=me.record.data['dqxz'];
							form.loadRecord(me.record);
							criminalPhoto.refresh(me.record);
							if(!Ext.isEmpty(selCri))selCri.down('gridcombobox').setValue(me.record,isSearch);
							//if(Ext.typeOf(me.selected)==='function')me.selected(null,me.record,null);
						}
					});
				}
			}
	
	.............................................................................................
	后端:
	
	/**
	 * 根据罪犯当前信息ID查询对象
	 */
	@RequestMapping(value="findById",method=RequestMethod.POST)
	public @ResponseBody CurrentInfo findById(String id)throws Exception{
		return currentInfoService.findById(id);
	}

<=====================================================================================================================================================================>

































<=====================================================================================================================================================================>
<=====================================================================================================================================================================>
easyui
<=====================================================================================================================================================================>
conbobox的文字过滤

	//行政区划下拉选择   分别为省、市、区县的input ID ，必须为数据库对应字段 且命名的冗余字段为将id更换为name 如familyProvinceId/familyProvinceName
	var initRegionCombox = function(provinceId,cityId,addressId,options){
	
	 //pinyin 这是因为行数据中有pinyin和jianpin这两个字段
		var defaultOptions={filter:function(q, row){ 
			var opts = $(this).combobox('options');  
			return row[opts.textField].indexOf(q) >= 0||
			(row['pinyin']?row['pinyin'].indexOf(q) >= 0:false)||
			(row['jianpin']?row['jianpin'].indexOf(q) >= 0:false);  
		}};
		options=$.extend(true, defaultOptions, options);
		PlatformUI.loadRegionByParentId(provinceId,"0",options);
		regionChangeCombox(provinceId,cityId,options,addressId);
		regionChangeCombox(cityId,addressId,options);
		regionChangeCombox(addressId);
	}
	var regionChangeCombox = function(parentId,childId,options,addressId){
		$("#"+parentId).combobox({
			onChange: function (newValue,oldValue) {
				if(PlatformUI.util.strIsNotEmpty(newValue)){
					if(PlatformUI.util.strIsNotEmpty(childId)){
						PlatformUI.loadRegionByParentId(childId,newValue,options);
					}
					if(PlatformUI.util.strIsNotEmpty(addressId)){
						$('#'+addressId).combobox('clear');
						$('#'+addressId).combobox('loadData', {});
					}
					
					//解决表单元素项验证失败的问题
					var comboValue = $('#'+parentId).combobox('getValue');
					$('#'+parentId).val(comboValue);
					var comboText = $('#'+parentId).combobox('getText');
					if(comboText.length != 32){
						var inputName = parentId.substr(0,parentId.length-2)+"Name";
						$("#"+inputName).val(comboText);
					}
				}
			}
		});
	}


<=====================================================================================================================================================================>

















<=====================================================================================================================================================================>
<=====================================================================================================================================================================>

jquery
<=====================================================================================================================================================================>
对jquery的重新认识:

	对于$(document).ready();这个函数对于jquery事件,我们在这里面写,而超出这个范围所定义的函数我们一样可以使用jquery的相关特性,例如 选择器,ajax,属性等,事件除外.
	$(document).ready(function () {

	});

	function drugstoreAndUserDetailed1222(){
		var s = $("#main");
		alert(s);
	}


<=====================================================================================================================================================================>
jquery选择器的高级应用:

<fieldset class="approvalForm" id="approvalForm">
<legend>填报内容</legend>
	<div>
		<table class="t2">
			<tr>
				<th>审核状态</th>
				<td>
					<select name="isBack" id="isBack">
						<option value="1" selected="selected">通过</option>
						<option value="0">回退</option>
					</select>
				</td>
				<th>是否上报省局</th>
				<td><select name='sfsb'><option value='否' selected='selected'>否</option><option value='是'>是</option></select></td>
			</tr>
			<tr>
				<th>审核意见</th>
				<td><textarea name="approvalInfo" id="approvalInfo" cols="25" rows="2"></textarea></td>
			</tr>
		</table>
	</div>
</fieldset>


<script type="text/javascript">
	var baseHtmlClear = $(".approvalForm table tr:eq(0)").find("td").eq(1);
	alert(baseHtmlClear.html());

	var baseHtmlClear1 = $(".approvalForm table tr:eq(0)").children().not('th:eq(0)').not('td:eq(0)');
	alert(baseHtmlClear1.length);
	alert(baseHtmlClear1.html());
	baseHtmlClear1.remove();

		
	//解析: 首先说明一下jQuery几个函数的含义. 
			1. html(): 打印所找到的元素对象html内容,但不包括自身,如果找到的对象有多个,则打印第一个元素对象html内容
			2. not() : 若找到的元素对象有多个,则可以用它来进行排除这几个元素中的某几个,若要排除某几个元素对中的某几个元素对象,则要借助children()函数
			
	//var baseHtmlClear1 = $(".approvalForm table tr:eq(0)").children().not('th:eq(0)').not('td:eq(0)'); 说得到的结果是
	[
		<th>是否上报省局</th>
				<td><select name='sfsb'><option value='否' selected='selected'>否</option><option value='是'>是</option></select></td>
	}
	
</script>

<=====================================================================================================================================================================>








如何将jquery对象转换为dom对象  // 注:带有 $开始的对象表示jquery对象.不带有的表示 原生 Dom对象

	var myDiv=$myDiv[0]; //表示将jqurey对象数组的第一个jquery对象转换为Dom对象
	方式2:
	var myDiv=$myDiv.get(0);//表示将jqurey对象数组的第一个jquery对象转换为Dom对象

如何将Dom对象转换为jquery对象.

	var myDiv=document.getElementById("....");
	var $myDiv=$(myDiv);


<----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
关于jquery中没有全局变量的解决方案:
	由于jquery中没有全局变量.因此我们可以为某些元素添加一个我们可能不用的属性,这个属性我们一般使用class,因为class属性的值可以是多个,例如:<div class="ux fz"></div>

	中的class属性就有两个值,一个是ux,另一个是fz,然后判断该元素有无值或两次值是否相等即可.


<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
对jquery的小结:
	jquery不像javascript那样在各个方面都做的非常强大,但是jquery在选择器和事件这方面做的做的非常好,关于这方面的知识我应结合 w3c 与 jquery文档 与 自己已经做的案例去		查找.当我们要增删一个元素是我们可以将 jqery对象转换为 javascript原生对象,javascript在那方面做的非常好,当然jquery也可以.当我们要用 css 时,用jquery可以,用	javascript的style属性也可以.
	


<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
jquery中一些常用的选择器:
	1. var input1=$("input:radio", document.forms[0]);  在文档的第一个表单中，查找所有的单选按钮(即: type 值为 radio 的 input 元素)。

	2. $(":radio[name=sex]:eq(0)").attr("checked",true);  页面中有一个性别单选按钮，请设置”男”为选中状态

	3.$("ul  li:eq(1)").remove();是删除ul下“橘子“那个节点。

	4.$("#form:disabled")选取id为form的表单内的所有不可用元素

	5.$("#name").is(":visible")是判断id为name的元素的可见性

	6.
	





<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
jquery中元素的增删查该:
	$("<div><p>Hello</p></div>").appendTo("body");动态创建一个 div 元素（以及其中的所有内容），并将它追加到 body 元素中。





<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML代码:
	<html>
	<head>
		<title>jqueryTest</title>
		<script type="text/javascript" src="../jquery-1.2.6.min.js"></script>
		<script type="text/javascript" src="myJquery.js"></script>
	</head>
	<body>
		<form>
			<input type="radio" name="man" value="man"/>
			<input type="radio" name="feman" value="feman"/>
				<table>
					<tr>
						<th>dfdfd</th>
						<th>ddfdf</th>
						<th>ddff</th>
					</tr>
					<tr>
						<td>hjhjgdgd</td>
						<td>hhjjh</td>
						<td>hhjjh</td>
					</tr>
					<tr>
						<td><input type="radio" name="feman1" value="feman1"/></td>
						<td><input type="radio" name="feman2" value="feman2"/></td>
						<td><input type="radio" name="feman3" value="feman3"/></td>
					</tr>
				</table>
		</form>	
		<form>
			<input type="radio" name="男" value="男"/>
			<input type="radio" name="女" value="女"/>
		</form>
	</body>
</html>


<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------

jquery与javascript混合使用时的注意事项.

	使用jquery查询时$("x .."),x表示某一个特定的符号.而使用javascript查询是则没有这个符号.当然jquery中可以直接使用javascript.


<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
jquery.form插件的是使用案例:

	jQuery.form插件轻松实现表单提交
			 现在我们使用jQuery的表单插件Jquery.form.js（官网）来实现异步表单提交。
	1)         该插件需要Jquery最低版本为v1.5
	2)         该插件提供了ajaxSubmit和ajaxForm两种表单提交方式，但不要对同一个表单同时使用两种方式。
	现在我将通过“jQuery+jQuery.form插件+ashx(一般处理文件)”来实现一个高效的异步表单提交。
	<form id="form1" action="ajaxOperation.ashx" method="post">
		<table border="1">
			<caption>jQuery.form.js异步提交方式</caption>
			<tr>
				<td>用户名：</td>
				<td>
					<input type="text" name="loginName" /></td>
			</tr>
			<tr>
				<td colspan="2" style="text-align: center">
					<button id="btnAjaxSubmit">ajaxSubmit提交</button>
					&nbsp;
					<input id="btnAjaxForm" type="submit" value="ajaxForm提交" />
				</td>
			</tr>
		</table>
	</form>
	1)         为<form>标签指定action值，指定使用ajaxOperation.ashx处理该表单请求。
	2)         使用两个提交按钮btnAjaxSubmit和btnAjaxForm分别对应jQuery.form插件提供的两种表单提交API。

...................................................................................................

	jQuery表单插件提交代码如下：
	<script type="text/javascript">
		$(document).ready(function () {
		var options = {
			success: function (data) {
				$("#responseText").text(data);
			}
		};
	 
			// ajaxForm
			$("#form1").ajaxForm(options); //这个方式好像有点不管用
	 
			// ajaxSubmit
			$("#btnAjaxSubmit").click(function () {
				$("#form1").ajaxSubmit(options);
				return false; //这个返回false是必须的,这样可以避免重新刷新页面
			});
		});
	</script>

```````````````````````````````````````````````````````````````````````````````````````````````````````
关于使用$("#form").ajaxSubmit({});的完整案例及说明:

	$("#formsubmit1").bind("click",function(){
		//uid="0281000303";
		 $("#bodyformfirstsubmit input[name = uid]").val(uid);
		 $("#bodyformfirstsubmit input[name = sess]").val(sess);
		 $("#bodyformfirstsubmit").ajaxSubmit({
			url:url+"getIntegralList",
			type:"post",
		     //	datatype:"json",  //这个datatype在不能设置,否则会出错
			async:true,       
			success:function(data){
				setBodymiddlebody(getObjectOfJson(data));
			},
			beforeSubmit:function(){
				bodyformfirstsubmit12();
			},
			error:function(){

			}
		});	
		return false; //这个返回false是必须的,这样可以避免重新刷新页面
	});



......................................................................................................

	方案：jQuery.form.js插件 + .ashx请求
			 此方案优势：
	1)         简简单单几句代码，我们就可以实现表单的提交，并且可灵活通过ajaxSubmit()函数基于任何事件的触发实现表单异步提交。
	2)         支持文件上传功能，并在新浏览器中支持进度条更新。（在jQuery.form插件源码分析中会进行说明）
	3)         与jQuery库完美结合，支持jQuery.ajax()函数触发的各种事件，支持jQuery.ajax()中所传递的参数。（在jQuery.form插件源码分析中会进行说明）
			  
			 好了，这样短而易读的代码，这样的偷懒方式不正是我们追求的吗？那jQuery.form插件提供的表单提交API是否高效呢？内部又做了些什么？接下来跟着我看看jQuery.form插件内部实现吧。。。
	 
	jQuery.form插件源码分析
			 jQuery.form插件（Jquery.form.js 官网），可以让我们非常简单的实现表单的异步提交、实现文件上传、进度条显示等等功能。
	 
	1.         $(“form1”).ajaxSubmit(options)
	1)         ajaxSubmit是jQuery表单插件核心函数。非常灵活，因为它依赖于事件机制，只要有事件触发就能使用ajaxSubmit()提交表单，eg：超链接、图片、按钮的click事件。
	2)         options参数是
	a)         一个函数，则为表单提交成功后调用的回调函数，即，options={success:function}。
	b)         options参数是一个集合，一个参数键值对
	键名	描述
	type	（默认为表单的method属性值，若未设置取GET）
	请求的类型，例如：POST、GET、PUT及PROPFIND。大小写不敏感。
	url	（默认取表单的action属性值，若未设置默认取window.location.href）
	请求的URL地址，可以为绝对地址也可以为相对地址。
	data	（对象成员必须包含name和value属性）提供额外数据对象，通过$.param()函数返回序列化后的字符串，稍后会拼接到表单元素序列化的字符串之后。
	extraData	（此参数无需外部提供，由内部处理）
	此参数是data在进行序列化成字符串之前的一个拷贝，只用于在表单包含<input type=”file” />并且是老浏览器。
	因为在老浏览器中文件上传文件我们需要通过<iframe>来模拟异步提交，此时extraData会转变为<input type=”hidden” />元素包含在表单中，被一起提交到服务器。
	dataType	一般不需自己设置。参数作用请看：《jQuery.ajax()-dataType》

	traditional	如果你想要用传统的方式来序列化数据，那么就设置为true。请参考$.param()深度递归详解。

	delegation	（适用于ajaxForm）ajaxForm支持Jquery插件的委托方式（需要Jquery v1.7+），所以当你调用ajaxForm的时候其表单form不一定存在，但动态构建的form会在适当的时候调用ajaxSubmit。Eg：
	$('#myForm').ajaxForm({ 
		delegation: true,
		target: '#output'
	});

	replaceTarget	（默认：false）与target参数共同起作用，True则执行replaceWirh()函数，false则执行html()函数
	target	提供一个Html元素，在请求“成功”并且未设置dataType参数，则将返回的数据replaceWith()或html()掉对象原来的内容，再遍历对象调用success回调函数。
	if (!options.dataType && options.target) {
		var oldSuccess = options.success || function(){};
		callbacks.push(function(data) {
			var fn = options.replaceTarget ? 'replaceWith' : 'html';
			$(options.target)[fn](data).each(oldSuccess, arguments);
		});
	}

	includeHidden	在请求成功后，若设置执行clearForm()函数清空表单元素则会根据includeHidden设置决定如何清空隐藏域元素。
		   传递true，表示清空表单的所有隐藏域元素。
			传递字符串，表示清空特殊匹配的隐藏域表单元素，eg：$('#myForm').clearForm('.special:hidden')，清空class属性包含special值的隐藏域
	clearForm	请求成功时触发（同success），并用options. includeHidden做为回调函数参数。
	回调函数：$form.clearForm(options.includeHidden);
	resetForm	请求成功时触发（同success）。
	回调函数：$form.resetForm()
	semantic	布尔值，指示表单元素序列化时是否严格按照表单元素定义顺序。
	在序列化只有<input type=”image” />元素会放在序列化字符串的最后，若semantic=true，则会按照它的定义顺序进行序列化。
	若你服务器严格要求表单序列化字符串的顺序，则使用此参数进行控制。
	iframe	（默认：false）若有文件上传'input[type=file]:enabled[value!=""]'，指示是否应该使用<iframe>标签（在支持html5文件上传新特性的浏览器中不会使用iframe模式）
	iframeTarget	指定一个现有的<iframe>元素，否则将自动生成一个<iframe>元素以及name属性值。若现有的<iframe>元素没有设置name属性，则会自动生成一个name值
	iframeSrc	为<iframe>元素设定src属性值
	 
	回调函数
	beforeSerialize	提供在将表单元素序列化为字符串之前，处理表单元素的回调函数。
	签名：function(form,options)
	函数说明：当前表单对象、options参数集合
	返回值：返回false，表示终止表单提交操作。
	beforeSubmit	提供在执行表单提交之前，处理数据的回调函数。
	签名：function(a,form,options)
	函数说明：通过formToArray(options.semantic, elements)返回的表单元素数组、当前表单对象、options参数集合
	返回值：返回false，表示终止表单提交操作。

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
jquery获取选中的select值和显示名称

	$("#select1").val(); 是取得选中的值，
	$("#select1").text(); 就是取得的是所有的文本。
	$("#select1 option:selected").text(); 获取选中的显示值

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
JQuery解析XML数据的几个例子
	//注意:下面只是一个简单的例子,详细用法请参见: ..\java\一些资料\jquery\常见的问题\html\JQuery解析XML数据的几个例子
	function parseXml() {
		$.get("script/xml/thumbnails.xml", function(xml) {
			alert(xml);
			$(xml).find("thumbnails").append('<thumbnail name="考核分日记载qqrrr" filename="ico_8.png" label="03" url="kpi.view.dayRecord.ApplyIndex" />');
			var x =  $(xml).find("thumbnail").length;   
			alert(x);
		});
	}

<----------------------------------------------------------------------------------------------------------------------------------------------------------------------









<=====================================================================================================================================================================>
jquery easy ui

<=====================================================================================================================================================================>	
如何的得到 combobox()中的被选中的text,

	使用 getText 这个方法
	
	使用案例:
		$('#syjglxId').combobox({
		  onChange:function(newValue,oldValue){
			  var comboText = $('#syjglxId').combobox('getText');
			  $("input[name='syjglxName']") .remove();
			  var hiddenInput="<input type='hidden' name='syjglxName' value='"+comboText+"' />";
			  $("#syjglxId" ).after(hiddenInput);
		  }
		}); 
		
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------
jquery easy UI 中的combobox进行禁用是否可以进行序列化
	
	jquery easy UI 中的combobox进行禁用后将不可以进行序列化.
	
	至于其他元素禁用后是否可以进行序列化还有待验证.
	
<----------------------------------------------------------------------------------------------------------------------------------------------------------------------







































<=====================================================================================================================================================================>
ajax

<=====================================================================================================================================================================>	ajax中json的使用:(ajax案例)
	
	$(document).ready(function(){
		$("#button").bind("click",function(){
			$.ajax({
			   type: "POST",
			   url:"/ajaxAndcookie/CookieServlet",
			   data:"judge=login",
			   dataType: "json",
			   async:true,  //async为true表示为异步请求,为false为同步请求
			// data: $("#form1").serialize(), 如果提交的表单,可以是用此项来序列化表单的数据
			   success: function(msg){
				alert(msg[0].name);
			    	$.each(msg,function(i,student){
			    		alert(student.id+"="+student.name);
			   	 });
			   },
			   error:function(){

			   }
			}); 
		return false;//这个返回false是必须的,这样可以避免重新刷新页面
	});
}); 

	对应的Java中返回值的json格式是:
	
		response.getWriter().write("{\"msg\":\""+judgeStr+"\"}");   //json格式中 name 的 冒号 很重要 ,否则在用json格式返回是会出错
		
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
var updateOutPrisonCureApproval = function(list,params){
	params = JSON.stringify(params);
	$.ajax({
		   headers: { //解决服务端接收的方式是一个map的情况
		        'Accept': 'application/json', 
		        'Content-Type': 'application/json' 
		   },
		   type: "POST",
		   url:contextPath + "/outPrisonCureApproval/saveByProcess",
		   data : params,
		   dataType: "json",
		   async:true,  //async为true表示为异步请求,为false为同步请求
		   success: function(msg){
			alert(0);
		   },
		   error:function(){
			   alert(0);

		   }
		}); 
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
李建平台的ajax,这个ajax可以在程序保存异常后,在页面上抛出异常信息
	PlatformUI.ajax({
			   headers: { //解决服务端接收的方式是一个map的情况
			        'Accept': 'application/json', 
			        'Content-Type': 'application/json' 
			   },
			   type: "POST",
			   url:contextPath + "/dataAnalysis/analysis",
			   data : analysisInputParams,
			   dataType: "json",
			   async:false,  //async为true表示为异步请求,为false为同步请求
			   afterOperation: function(data){
				   
			   }
			});

........................................................................................................................
服务端 : 
	//根据流程信息保存业务数据
		@RequestMapping(value="/saveByProcess",method = RequestMethod.POST)
		public @ResponseBody Map<String, Object> saveByProcess( Map<String,Object> model ){
			System.out.println();
			
			return null;
		}

<=====================================================================================================================================================================>































<=====================================================================================================================================================================>	
<=====================================================================================================================================================================>
jqgrid

<=====================================================================================================================================================================>	
如何动态改变jqgrid的列

	/**
	 * 创建项目编辑jqGrid
	 * @param itemText
	 * @param colNames 动态添加的colNames
	 * @param colModel 动态添加的colModel
	 */
	function createItemsEditGrid(itemText,colNames,colModel){
		//卸载jqGrid
		$.jgrid.gridUnload('#itemsEditList');
		
		itemsEditList = $("#itemsEditList").jqGrid({
			datatype: "json",
			autowidth: true,
			autoheight: true,
	//        height:300,
			mtype: "GET",
			colNames: colNames,
			colModel: colModel,
			pager: "#itemsEditPager",
			rowNum: 10,
			viewrecords: true,
			gridview: true,
			loadComplete: function (data) {
				if(data.items == null || data.items == ""){
					toastr.warning("没有数据!");
				}
			},
			autoencode: true,
			caption: itemText+"编辑"
		});
	}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
怎么在jqgrid生成的表格中添加一行？(方法一:该方是在grid表格的后面添加一行)

	// 选中行rowid
	var selectedRowId = $("#grid").jqGrid('getGridParam','selrow');
	 
	// 选中行实际表示的位置
	var ind = $("#grid").getInd(selectedRowId);
	// 新插入行的位置
	var newInd = ind + 1;
	
	var currentRowId = "fdsfsdfsfsfsId";
	// 插入一行
	$("#grid").addRowData(currentRowId,{},newInd );
	
........................................................................................................................
怎么在jqgrid生成的表格中添加一行？(方法而:该方是在grid表格中选中的行的前后添加)

	解析: 开发过程需要新增数据，希望数据总是添加到jagrid表格的第一行，以便用户查看。之前实现的总是加到最后一行，网上搜了下，还真用，这个方法一直才用，不知道居然可以指定插入位置!!!
	
	1. 使用 $("#jqgrid").addRowData(currentRowId, data, pos, selectedRowId); (一般用这个就可以了)或者 
			$("#jqgrid").jqGrid("addRowData", newInd, {}, "after",rowId); 或者 
			itemsEditList.jqGrid("addRowData", newInd, {}, "after",rowId); ( itemsEditList 是创建 grid后返回gridList 对象)
	
	2. 参数的解析 : $("#jqgrid").addRowData(rowId, data, pos, selectedRowId); 
		a. rowId : 指的是 当前插入行的id,该id自己定义即可
		b. data  : 当前插入行的数据,是一个 对象 {}
		c. pos   : 插入的位置 可以为[first,last,before,after], 为后两者是需要指定 被选中行的 selectedRowId
		d. selectedRowId : 当前被选择行的Id
		
	3.案例
	
			var getSelectedRow = function(){
				// 选中行rowid
				var rowId = itemsEditList.jqGrid('getGridParam','selrow');
				// 选中行实际表示的位置
				var ind = itemsEditList.getInd(rowId);
				// 新插入行的位置
				var newInd = ind + 1;
				
				//将新添加的行插入到第一列  
				itemsEditList.jqGrid("addRowData", newInd, {}, "first",rowId); 
				
				//将新添加的行插入到最后一列
				itemsEditList.jqGrid("addRowData", newInd, {}, "last",rowId); 
				
				//将新添加的行插入到被选择行的前面
				itemsEditList.jqGrid("addRowData", newInd, {}, "before",rowId); 
				
				//将新添加的行插入到被选择行的后面
				itemsEditList.jqGrid("addRowData", newInd, {}, "after",rowId); 
				
			}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
jqGrid 获取一行数据的案例

	var getSelectedRow = function(){
		// 选中行rowid
		var rowId = itemsEditList.jqGrid('getGridParam','selrow');
		// 选中行实际表示的位置
		var ind = itemsEditList.getInd(rowId);
		// 新插入行的位置
		var newInd = ind + 1;
		
		var data = {paragraphStart:"xxxx",paragraphEnd:"ccc",columnName:"sdfsfs"};
//		//将新添加的行插入到被选择行的后面
		itemsEditList.jqGrid("addRowData", newInd, data, "after",rowId); 
		
		//设置grid行可编辑  
		itemsEditList.editRow(newInd,true); //或者 itemsEditList.jqGrid('editRow', rowId);
		
		//保存该行编辑的数据(通过行Id,切记该行id是一个字符串,不是数组,若是数组将会报 (value.charCodeAt is not a function) 的错误)
		itemsEditList.saveRow(newInd); 
		
		//获取某个单元格的数据,在获取数据之前一定要先保存行数据,
		/**
		 * newInd : 行id
		 * paragraphStart : 该列对应的字段名
		 */
		var cellValue = itemsEditList.getCell(newInd,'paragraphStart');
		
		//获取行数据,在获取数据之前一定要先保存行数据,
		var rowData = itemsEditList.getRowData(newInd);

		var cellValue = rowData['paragraphStart'];
		
	}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
jqGrid 操作行的常用api
	0.后台主键Id不是 'Id' 而是 'xxxId' ,jqgridId 如何获取行Id的值
		multiselect: true,//设置为多选
		colmodel设置:{ name: "actId", index:"actId",hidden: true,searchoptions :{sopt:['eq','cn']},key:true}, //这里将 这个个 列设置为主键Id
		var rowIds = allList.jqGrid ('getGridParam', 'selarrrow'); //获取选中的行Id

	1. 获取到所有行数据
		var obj = $("#list").jqGrid("getRowData");
		
	2. 获取被选择行的id
	
		var selectedRowId = $("#list").jqGrid('getGridParam','selrow');
		
	3. 获取被选中的数据
	
		var selectedRowId = $("#list").jqGrid('getGridParam','selrow');
		var selectedData = $("#list").jqGrid("getRowData", selectedRowId);
		
	3. 得到所有行的行Id
	
		var rowIds = $("#list").jqGrid('getDataIDs'); 
		
	4. 获取选中行的下一行的Id 及改行的数据
	
		//得到被选中行
		var selectedRowId = itemsEditList.jqGrid('getGridParam','selrow');
		
		// 选中行实际表示的位置,即被选中行的行号,该行号是从 1 开始的
		var selectedRowNumber = itemsEditList.getInd(selectedRowId);
		
		//得到所有的Id
		var rowIds = itemsEditList.jqGrid('getDataIDs'); 
		
		//得到被选择行的下一行的Id //由于行号是从 1 开始的,所以这里就不加1 
		var nextId  = rowIds[selectedRowNumber];
		
		//得到被选中行的下一行的数据
		var nextData = itemsEditList.jqGrid("getRowData", nextId);
		
	5.其他
		 JqGrid选中行、取消选中行、获得选中行数据

		取消所有选中的行：
		$("jqgridtableid").trigger("reloadGrid")；

		设定选中行,可设定多行选中：
		$("jqgridtableid").jqGrid('setSelection',id1);
		$("jqgridtableid").jqGrid('setSelection',id2);

		获得选中行的ID数组：
		var ids = $("jqgridtableid").jqGrid('getGridParam','selarrrow');

		获得某单元格的数据：
		var celldata = $("jqgridtableid").jqGrid('getCell',id,colnum);

		获得所有行的ID数组：
		var ids =  $("jqgridtableid").jqGrid('getDataIDs');
	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
jqGrid 操作常用事件的常用api

	

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
jqGrid 产生横向滚动条与和动态合并列的案例:

	html代码:
	
		<div>
	    	<table id="showTableList"></table> 
	     	<div id="showTablePager"></div>
	    </div>
		
	js代码:
	
		1.创建grid:
		
			/**
			 * 创建jqGrid
			 * @param colNames
			 * @param colModel
			 */
			function createGrid(colNames,colModel,sql){
				showTableList = $("#showTableList").jqGrid({
					datatype: "json",
					url: contextPath + "/criminalSearch/loadShowData?sql="+sql,
					autowidth: true,
					height:300,
					mtype: "GET",
					colNames: colNames,
					colModel: colModel,
					pager: "#showTablePager",
					rowNum: 20,
					viewrecords: true,
					gridview: true,
					autoencode: true, //产生横向滚动条的配置
					shrinkToFit:false, //产生横向滚动条的配置
					loadComplete: function (data) {
						
						if(data.items == null || data.items == ""){
							toastr.warning("没有数据!");
						}
						
						// 合并相同列信息
						merger("showTableList", megerArray,"BH");
					},
					autoencode: true,
					caption: "条件查询结果"
				});
			}

		2.动态合并列的函数
		
		//合并jqgrid表格 gridName--表格名,names--合并的列名,groupColumn--分组列
		function merger(gridName,names,groupColumn){
			//获取jgrid生成的第一个tr标签
			var trs = $("#"+gridName+">tbody>tr:gt(0)");
			var num = 0;
			//循环合并单元格
			$.each(names, function (ind, name) {
				//获取当前tr对象,根据jgrid生成标签的规则aria-describedby='表格_属性'
				  var bg = trs.eq(0).children("[aria-describedby='"+gridName+"_" + name + "']");
				  var preZfbh = trs.eq(0).children("[aria-describedby='"+gridName+"_"+groupColumn+"']");
				  var index = bg.index();
				  var  rowsp = 1;
				  trs.slice(1).each(function (ind2, tr) {//slice方法可从已有的数组中返回选定的元素。
					var me = $(tr).children("td").eq(index);
					var meZfbh = $(tr).children("td").eq(preZfbh.index());
					if(bg.text()!=""&& me.text()!=""){
						if ($.trim(bg.text()) == $.trim(me.text()) && $.trim(meZfbh.text()) == $.trim(preZfbh.text())) {//如果值一样就合并行数+1 然后设置rowspan,让当前单元格隐藏
							rowsp++;
							me.hide();
						} else {
							bg.attr("rowspan", rowsp);
							bg = me; 
							rowsp = 1;
						}
					}
					bg.attr("rowspan", rowsp);
					preZfbh = meZfbh;
				});
			});
		}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
如何在jqgrid的某一列中实现 <a>的超链接

	方案一:
		<script>
		jQuery("#grid_id").jqGrid({
		...
		   colModel: [ {name:'myname', formatter:'showlink', formatoptions:{baseLinkUrl:'someurl.php', addParam: '&action=edit'}, ...} 
			  ... 
		   ]
		...
		});
		</script>
		
	方案二:
	
	 gridComplete: function() {
            var graduateIds = jQuery("#showTableList").jqGrid('getDataIDs');
             for (var i = 0; i < graduateIds.length; i++) {
                 var rowId = graduateIds[i];
                 var rowData = jQuery("#showTableList").getRowData(rowId)
                 console.log(rowData);
                 var link = "<a href='javascript:criminalDetail("+JSON.stringify(rowData)+")'><font color='blue'>"+rowData['BH']+"</font></a>"; 
                 jQuery("#showTableList").jqGrid('setRowData', rowId, { BH:link}); //给grid添加链接 
             }
         }, 
		 
		 
		/**
		 * 罪犯详细事件
		 * @param rowData
		 */
		function criminalDetail(rowData){
			alert(rowData);
			console.log(rowData);
		}
		
		同时要求 colModel 的 对应列必须制定  formatter:'' 这个参数
		colModel: [ {name:'myname', formatter:''}, ...} 
		 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------		















